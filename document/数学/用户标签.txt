-------活动偏好标签----------
产生的问题 : 要问的问题

1.没有F_value	1.没有F_value	的计算规则
的计算规则

20160818-01	2016/8/18	2016/8/20	3	1	首投，任意，5000元	waitdays
答案 这类活动只有F_VALUE,因此只计算F_VALUE即可,不需要知道F_value,在计算权重的时候,只是考虑F_value*100%就可以了,不需要*0.25了




2.
a.持有30日,万一获取的是以前存储的钱呢
为什么要计算以前取几次钱,没看到该值参与运算
这个需要前60天作为条件吗
20151013	2015/10/13	2015/10/13	1	2	投资max，持有30日	F_value	MF_value
答案是 不需要考虑赎回的问题,只要用户参与进来就算



3.没有加入定期总额，我是否可以理解成我们关注的用户是否参与活动,而不在意结果呢?
20160701	2016/7/1	2016/7/7	7	3	邀请max用户参与，定期总额排名，top50	invite_num
答案是 不需要关注结果,只要用户参与进来了就算,不需要考虑最终用户排名


4.要不要把条件增加一个注册时间也是在这个时间段内
20160407-02	2016/4/7	2016/4/9	3	3	邀请max用户参与，首投定期	invite_num
答案是 不需要加入注册时间周期,因为他的活动不考虑什么时候注册的,只是关注这段期间内是否有首投定期


5.没有加入定期
20160914	2016/9/14	2016/9/29	16	3	邀请max用户参与，首投，定期	invite_num
sql中不用加入定期,因为活动的规则是邀请的用户首投活期或者首投定期都算,而我们的产品是先将资金转到获取里面,然后转入到定期里面,因此只要投资活期了也就投资定期了


二、算法部分
分为两部分
1.活动参与度
 表示用户参与活动的次数
 算法:用户对一类活动的参与度 = 每一个活动的计算和,而每一个活动=该活动的权重*用户是否参与该活动了,参与了返回1,不参与返回0,
 即用户参与了该活动,结果就是该活动的权重,最终求和就是用户参与多少个这个类型的活动获得的权重和
2.活动偏爱度
  表示用户是否喜欢这类活动,
  衡量用户平均参与该类活动实际表现的指标。实际表现与用户活动期的超常程度正相关，即用户按活动的导向在活动期间表现得远超平日，则代表用户对本活动的偏爱度很高。
算法:用户对一类活动的偏爱度 = 每一个活动的计算和,而每一个活动=该活动的权重*用户对该活动的偏爱。
偏爱:
a.活期和定期活动:F_value*0.25+MF_value*0.75
b.邀请类:返回用户邀请了多少人

3.权重算法
由于活动参与度和偏爱度都涉及到了权重,权重如何算呢?
1.同一类型的活动按照时间倒排序,获得每一个活动的序号,此活动的权重根据活动序号指数衰减
2.公式为：权重=exp(-0.69*活动序号)  其中exp=e,即2.718281828459045那个数字,java中Math.E
3.活动的权重只与活动序号相关，与用户是否参与此活动无关，即计算偏爱度时，用户参与此类活动的总权重值可能小于1.
概括说一下
我们认为最新的活动,权重应该更高,但是多少呢?我们想10个活动的总权重=1,这样的话.就得到了这个公式。
我们可以尝试带入10个计算一下总和,即差不多是等于1的

double sum = 0;
for(int i=1;i<11;i++){
	System.out.println(i+":"+Math.pow(Math.E,-0.69*i));
	sum = sum + Math.pow(Math.E,-0.69*i);
}
System.out.println("sum:"+sum);
打印
1:0.5015760690660556
2:0.25157855305975657
3:0.12618578170503877
4:0.06329176835964075
5:0.03174563637806796
6:0.0159228515045117
7:0.007986521265955504
8:0.004005847942090421
9:0.002009237464070063
10:0.0010077854290485118
sum:1.0053100521742357


第一部分算法
很简单,就不涉及了


第二部分算法
1.factor_F = 活动期间内购买次数/活动天数

2.factor_F_formal = (活动前购买次数+1)/(活动前用户样本数+2) 做个平滑处理,防止用户购买次数为0,则返回1,不至于结果为0,因为这个结果后续会当作分母的,不能为0.
同时分子样本数+2表示用户注册前用户仅存活为1天的时候,分子就是1了,那么最终值取决于分母,如果+2,就变成分数了
注意:活动前用户样本数 如果用户注册<60天,则返回具体天数,如果>60天,则返回60

3.第一个关键指标 F_value=factor_F/factor_F_formal

4.factor_MF = 活动期间用户购买总金额/购买次数
5.factor_MF_formal = 活动期以前用户投资总额/活动期以前用户购买次数,
注意:如果活动期以前用户投资总额=0,则要给一个默认值,因为该值也是做分母的,因此假设活动是定期活动,默认值是1000,活期活动默认值是100

6.第二个关键指标 MF_value=factor_MF/factor_MF_formal

注意:
1.以上活动期间和活动前得到的总金额和次数,都是针对同一样的where条件筛选的,筛选的条件都是满足活动的条件


如何把具体的分数转换成分类
定义A B C三个分类,为每一个分类定义范围.比如 74 37 5 为三类,或者平均分配
先聚类--对于聚类可以知道中心节点在哪里
再分类--因为中心点不能当作分类点,因为分类点会有交集(一维以上的数据),如果是一维数据做聚类,那临界点很容易找到了,就是每一个聚类的min和max,即最大值和最小值就可以了,因为一维的数据聚类结果是没有任何交集的


----------------------------------------
开发需要的变量以及思路
1.活动参与度
活动权重*是否参与活动    然后求和
活动权重*偏爱,其中偏爱
a.活期和定期活动:F_value*0.25+MF_value*0.75
b.邀请类:返回用户邀请了多少人


而一个活动确定了,那么该活动的权重也就确定了
sql可以确定:
1.是否参与了该活动
2.user邀请了多少人
3.每一个user对应的一个活动的F_value和MF_value


用户参与了一个活动 那么就有一个值,没参与就是0,那么活动有限,最终就可以知道用户得了多少分


拿到一类活动的所有sql

每一个sql 可以得到
----------------------------------------
最终表结构设计

第一个表 活动表
记录活动内容以及该活动的动态权重(需要每次添加活动的时候,动态修改该值),以及该活动的flag,仅仅使用F_value还是FM_value指标标识符

活动id 活动详细信息 权重 flag(标识是否仅用F_value,或者用F_value和MF_value计算偏爱度)

CREATE TABLE `activity` (
  `activity_id` bigint(11) NOT NULL COMMENT '活动ID',
  `begin_date` varchar(10) COLLATE utf8_bin NOT NULL COMMENT '开始时间',
  `end_date` varchar(10) COLLATE utf8_bin NOT NULL COMMENT '结束时间',
  `activity_day` int(11) NOT NULL DEFAULT '1' COMMENT '活动天数',
  `activity_type` tinyint(3) NOT NULL COMMENT '1牺牲资金 2牺牲流动性 3牺牲资源',
  `activity_desc` varchar(50) COLLATE utf8_bin NOT NULL COMMENT '活动描述',
  `activity_number` int(11) NOT NULL COMMENT '活动序号',
  `activity_weight` decimal(14,2) DEFAULT NULL COMMENT '权重exp(-0.69*活动序号)',
  `activity_flag` tinyint(3) NOT NULL DEFAULT '0' COMMENT '1表示算F_value和MF_value 2表示只算MF_value',
  PRIMARY KEY (`activity_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin


第二个表: 一个user 一个活动一定产生一条数据
userid
活动类型
活动id(可以知道活动是否参加)
在活动中邀请多少人
活动中算出来的 F_value
活动中算出来的 MF_value
活动最终得分score分,这个值其实意义不大,如果0.25*F_value+0.75*MF_value的公式变化了,该值也是变化的,但是需求方要,所以就冗余提供了


第三个表  最终用户标签表
user 活动类型  参与度  偏爱度


因此基于这三个表就可以给每一个用户打标签了
sql1
每一种活动一个sql,当然优化一下,可以让多个活动公用一个sql
例如:
select	a.*,
		b.invest_total_formal,
		b.invest_freq_formal
from
(
select userid,
		count(*) as invest_freq,
		sum(amount) as invest_total
from fact.invest_record
where to_date(create_time)='2015-08-27'
group by userid
)a
left join
(
select userid,
		count(*) as invest_freq_formal,
		sum(amount) as invest_total_formal
from fact.invest_record
where to_date(create_time)<'2015-08-27'
group by userid
)b on a.userid=b.userid
left join dim.dim_user_info c on a.userid=c.userid
where to_date(c.reg_time)<'2015-08-27'



sql2:
select 活动类型,userid,
sum(权重) 参与度,
if(活动类型1 or 2) sum(权重*(F_value*0.25+MF_value*0.75)) 偏爱度,
if(活动类型3) sum(权重*邀请多少人) 偏爱度
from biao2 left join 活动表
group by 活动类型,userid

sql3:
select user,
if(活动类型 = 1 ) then 参与度分数计算A B C,
if(活动类型 = 1 ) then 偏爱度分数计算A B C,
if(活动类型 = 2 ) then 参与度分数计算A B C,
if(活动类型 = 2 ) then 偏爱度分数计算A B C,
if(活动类型 = 3 ) then 参与度分数计算A B C,
if(活动类型 = 3 ) then 偏爱度分数计算A B C
from biao
group by user 活动类型