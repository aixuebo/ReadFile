一、背景与总结
1.复制
相同的数据，多副本的存放在不同的节点上。

2.本章节核心内容
a.我们将讨论三种流行的变更复制算法：单领导者（single leader，单主），多领导者（multi leader，多主） 和 无领导者（leaderless，无主）。
b.在复制时需要进行许多权衡：例如，使用同步复制还是异步复制？如何处理失败的副本？

二、复制 vs 分区
复制和分区是不同的机制，但它们经常同时使用

1.复制（Replication）
相同的数据，多副本的存放在不同的节点上。
提供数据冗余存储，目的用于提高读取吞吐量、数据的安全高可用。

2.分区 (Partitioning)
将数据内容进行拆分成较小的子集，从而不同分区分布在不同的节点上(亦称 分片，即 sharding)

3.现实中:
复制和分区是不同的机制，但它们经常同时使用。
a.首先数据肯定先通过分区去拆分成子文件，存放在不同节点上，减少扫描数据的范围(数据查询裁剪)。
b.同一个分区的数据，也会拆分成更小的小数据块。也属于分区，小数据块存放在不同节点上。
c.每一个小数据块都会有副本的概念，即复制（Replication）。

三、领导者与追随者
1.副本打来的问题
副本（replica），当存在多个副本时，不可避免的出现一个问题:如何确保所有数据都落在了所有的副本上？
即每一次写入数据，都要所有的副本都同时生效，否则副本就包含不一样的数据了。

2.解决方案 --  基于领导者的复制（leader-based replication）（主从复制 master/slave） -- 比如binlog
写入
a.选择其中一个副本为leader,接收客户端写请求，并且在该副本节点上完成客户端请求的写入。
b.其他副本为followers,也叫从库、只读副本等。
复制日志（replication log）：leader会发送通知给所有followers。
c.follower去leader拉去日志，并更新follower节点。

读取
所有副本都可以参与读。

3.同步复制与异步复制
a.用户请求leader ,leader通知 followers，当一个follower成功后，leader通知客户端成功。
此时相当于1个同步+N个异步。
问题是 此时如果用户查询在N副本时，看到的结果是不一致的。
好在大多数情况下，异步在1s内可完成同步。但从库可能落后主库几分钟或更久，例如：从库正在从故障中恢复，系统正在最大容量附近运行，或者当节点间存在网络问题时。


同步复制的优点是，从库能保证有与主库一致的最新数据副本。
缺点是，如果同步从库没有响应（比如它已经崩溃，或者出现网络故障，或其它任何原因），主库就无法处理写入操作。主库必须阻止所有写入，并等待同步副本再次可用。

所有从库都同步，任何一个节点的中断都会导致整个系统停滞不前。因此是线上不可取的。
通常都是1个从库同步即可，此时保证你至少在两个节点上拥有最新的数据副本：这种配置有时也被称为 半同步（semi-synchronous）

4.新增节点
a.获取主库某一个时刻的快照(数据库备份功能是基础功能)。
b.快照内容复制到新节点。
c.新节点连接主库，读取日志，直到追赶上主库。
d.新节点用于生产。

5.高可用 --- 处理节点宕机
a.从库失效：停掉查询服务，重启，连接主库追赶，恢复查询服务。
