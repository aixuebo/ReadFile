一、背景与总结
1.图模型之后的内容，接触不多，暂时不看了。

二、数据模型
1.关系型数据模型。
利用主外键的方式存储一对多、多对多关系。
2.文档模型
使用xml、json的方式，一个字段存储多对多、一对多的内容。避免每次加载多次关系模型；缺点是需要应用系统解析。
现在api使用json是主流交互方式，所以越来越多的数据库支持json存储与解析。
3.图模型。
存储更复杂的多对多关系，体现为顶点和边。


三、命令式与声明式
1.在声明式查询语言:sql或者关系代数。
你只需指定所需数据的模式 - 结果必须符合哪些条件，以及如何将数据转换（例如，排序，分组和集合）。
但不是如何实现这一目标。数据库系统的查询优化器决定使用哪些索引和哪些连接方法，以及以何种顺序执行查询的各个部分。

声明式查询语言是迷人的，但它还隐藏了数据库引擎的实现细节，这使得数据库系统可以在无需对查询做任何更改的情况下进行性能提升。
2.命令式
语言告诉计算机以特定顺序执行某些操作。可以想象一下，逐行地遍历代码，评估条件，更新变量，并决定是否再循环一遍。
即如何执行是受开发者决定，而不是引擎决定。扩展性很差，但效率会更高。比如spark自己写的代码，效率比sql的执行计划性能更高效；缺点维护性成本高。

3.区别
命令代码很难在多个核心和多个机器之间并行化，因为它指定了指令必须以特定顺序执行。
声明式语言更具有并行执行的潜力，因为它们仅指定结果的模式，而不指定用于确定结果的算法。在适当情况下，数据库可以自由使用查询语言的并行实现。