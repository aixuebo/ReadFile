一、背景与总结


二、数据传输的格式
1.json、xml
2.java序列化接口
3.Thrift、Protocol Buffers
4.Avro


三、Thrift、Protocol Buffers 解决问题思路
1.程序发生迭代，需要新增、修改、删除原有字段，如何做到向后兼容 -- Thrift 和 Protocol Buffers 如何处理模式更改。
a.维护字段元数据信息
每一个字段会独立创建一个编号作为映射。并且维护字段是否必填，以及数据类型。
b.插入数据时，仅插入编号与数据值信息。
c.可支持更新字段名称：由于元数据的存在，字段发生名称变更，并不影响数据。因为数据存储的是编号的引用。
d.可支持新增字段: --- 类似于hive创建schema,新增字段时，不需要回刷历史数据，不影响查询，只是查询结果是null。
新增一个字段，则创建一个新的编号。
如果旧的代码（不知道你添加的新的标签号码）试图读取新代码写入的数据，包括一个新的字段，其标签号码不能识别，它可以简单地忽略该字段。
向后兼容性呢？只要每个字段都有一个唯一的标签号码，新的代码总是可以读取旧的数据，因为标签号码仍然具有相同的含义。
唯一的细节是，如果你添加一个新的字段，你不能设置为必需。如果你要添加一个字段并将其设置为必需，那么如果新代码读取旧代码写入的数据，则该检查将失败。
因为旧代码不会写入你添加的新字段。因此，为了保持向后兼容性，在模式的初始部署之后 添加的每个字段必须是可选的或具有默认值。
e.支持字段删除
类似新增字段逻辑。
细节：只能删除可选的字段（必需字段永远不能删除），并且确保序号是自增长的，方式后期创建的字段序号与删除的字段序号冲突。(这个很容易，而且也应该是设计的必须条件)。

2.如何更改数据类型
a.有一个风险，值将失去精度或被截断。
b.因为字段元数据信息的存在，所以字段变更类型是很容易的事情，只是强制变更可能存在类型不匹配的风险，需要提示给用户。
现实中也确实变更字段类型的时候，业务自己就知道是可以变更的，其实数据库做到提示就够了，不需要真的强约束的限制。风险可以交给用户自己决定。


四、Avro的解决问题思路
1.demo
record Person {
    string                userName;
    union { null, long }  favoriteNumber = null;
    array<string>         interests;
}
等价的 JSON 表示：

{
    "type": "record",
    "name": "Person",
    "fields": [
        {"name": "userName", "type": "string"},
        {"name": "favoriteNumber", "type": ["null", "long"], "default": null},
        {"name": "interests", "type": {"type": "array", "items": "string"}}
    ]
}
2.实现方案中，不是使用标签编码的方式实现的，而是紧凑的按照name与字段类型的方式组合数据。
因为是使用name,所以更改字段名字是很困难的。
当读取数据时，通过版本号。转换到对应的版本的内容。如果读取的字段不存在，则忽略该字段读取，对象结果还是null。


接下来的内容没有继续阅读，感觉不是很重要。
