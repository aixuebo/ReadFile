一、背景与总结
1.DPP（Dynamic Partition Pruning)，动态分区剪裁。
作用是通过过滤分区,从而达到大幅削减事实表的数据扫描量的目的。

二、背景原因 以及 DPP要解决的是什么问题
1.谓词下推已经可以减少数据处理量了,但如果用户可以不扫描数据，而是直接通过分区字段作为谓词，直接不扫描某些分区，那效率会更好。
2.比如用户表，可以根据城市来做分区，因为城市全国也没多少个，可以枚举出来的。
但如果订单表呢，以用户id做分区，那分区数量太大了，而且每一个用户的数据量又很少，会造成小文件，因此订单表不适合用user_id做分区。
那么当订单表 join user表的时候，只能用谓词下推的方式处理数据吗？能否用DPP的方式助力减少订单事实表的数据处理量呢？


三、DPP实现原理
demo例子 订单表 join user维度表。
1.原理流程
a.user表经过DPP按照某一个分区或者谓词下推的方式，减少很很多数据量。
b.由于订单表需要的是user_id，因此user表满足条件的user_id是非常少的，可以利用广播join方式解决。
c.把满足条件的userId作为过滤条件，应用到事实表的数据源，就可以做到减少数据扫描量，提升I/O效率。

2.DPP使用的触发条件
虽然DPP的运作逻辑非常清晰，但并不是所有的数据关联场景都可以享受到DPP的优化机制，想要利用DPP来加速事实表数据的读取和访问，数据关联场景还要满足三个额外的条件。

a.DPP是一种分区剪裁机制，它是以分区为单位对事实表进行过滤,因此事实表必须是分区表，而且分区字段（可以是多个）必须包含Join Key。
即前提条件是订单表中必须按照user_id做分区了。
b.一定on条件是等值关联。
c.过滤后的user维度表,必须要可以放在广播内存阈值内。
广播中的数据是map<on的条件匹配的信息,project投影需要user表的属性>。
比如key是user_id，value是用户名称、用户年龄。

