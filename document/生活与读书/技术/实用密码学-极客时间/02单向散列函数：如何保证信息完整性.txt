一、背景与总结
1.好的hash函数
hash结果要均匀分布。
hash长度要足够长，又不能太长(影响性能)。


二、什么是单向散列函数
总结: 给定任意大小的输入，输出值都是固定大小(散列函数)；同时满足计算容易，破译难的函数。

1.单向函数
a.定义:正向计算容易，逆向运算困难的函数.即给定一个输入，很容易计算输出，比如MD5，输入给定后，可以稳定得到输出，反之得不到输入。
b.每一个被破解的单向散列函数的密码学算法，在它被发明的时候，人们都没有找到逆向运算的办法，可是被破解的时候，人们就发现原来还是有办法去逆向运算的。因此今天还是安全的算法，明天就可能被破解。
c.好的单向函数特征:函数计算性能好；破解强度难。

2.散列函数（Hash Function）
a.定义:可以把任意大小的数据，转行成固定长度的数据的函数。我们把转换后的数据，叫做散列值。
比如说，无论输入数据是一个字节，或者一万个字节，输出数据都是16个字节。
b.散列函数经常被人们直译为哈希函数，所以我们也可以称散列值为哈希值。
c.哈希冲突碰撞问题 --- 当把无限的数据，转换成固定长度的数据，冲突问题是不可避免的。
散列值越长,组合的结果越多，冲突碰撞的概率就小。比如说，32位固定长度的散列值就要比16位固定长度的散列值发生碰撞的可能性更小。
散列值越长，通常也就意味着计算越困难，计算性能越差。

除了散列值长度之外，想要降低散列值碰撞的可能性，我们还要考虑散列值的质量。一个好的散列函数，它的散列值应该是均匀分布的。也就是说，每一个散列值出现的概率都是一样的。
如果不这样的话，一部分散列值出现的概率就会较高，另一部分散列值出现的概率会较低，别人就更容易构造出两个或者多个数据，使得它们具有相同的散列值。这种行为，叫做碰撞攻击。

三、单向散列函数
1.特性:
正向运算容易,性能高；
逆向运算困难；
构造碰撞困难。

2.雪崩效应 -- 是密码学算法一个常见的特点，指的是输入数据的微小变换，就会导致输出数据的巨大变化。
任意字符的改动，都会导致“单向散列函数”结果天差地别。
严格雪崩效应是雪崩效应的一个形式化指标，我们也常用来衡量均匀分布。严格雪崩效应指的是，如果输入数据的一位反转，输出数据的每一位都有50%的概率会发生变化。

3.java的hashCode实现，都满足不了逆向运算困难的要求，所以它们是不能算作单向散列函数的。
32位整数的哈希值是这个整数本身，所以逆向运算一点难度都没有，当然不能算作单向散列函数。

四、单向散列函数是怎么解决数据完整性问题的呢
完整性意味着:如果数据有变动，能够被检测出来，我们就不采纳被篡改的数据。使用单向散列函数，就可以通过检查数据是否有变动，来解决数据完整性问题。

因此发送者要发送正文+散列值。
接受者接受正文+散列值，对照散列值是否相同。


这里面产生一个新的问题，接受者怎么安全的接收散列值。因为散列值很重要，不能明文发送。这个是下节课的讨论内容。
