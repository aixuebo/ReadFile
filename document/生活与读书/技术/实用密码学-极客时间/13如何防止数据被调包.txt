一、背景与总结
1.数据完整性，很关键。他要解决的问题是 数据可以被阅读，但不能被更改。
解决思路也很简单，不仅要发送 密文信息，也要发送一段验证码。

2.推荐算法 HmacSHA256和HmacSHA384是目前最流行的两个HMAC算法。


二、消息验证码（Message Authentication Code, MAC）--- 验证码要满足什么条件
1.额外信息，即验证码肯定不是正文信息。
2.验证码与正文信息要有关联性。即验证码的结果来自于正文信息内容。
3.如果正文信息有变动，验证信息也要变动，而且验证信息的变动结果要不可预测。
4.验证信息的计算要快，数据要小。 ---- 单向散列函数。

发送端:MAC = 消息验证函数(明文信息,消息验证密钥)。 发送MAC。
接收端:接收密文，解密为明文。    使用明文，计算MAC，校验两个MAC是否相同。

三、接收端需要知道发送端的哪些信息
消息验证码需要的密钥。 ---- 对称密钥
消息验证码算法。---- 基于单向散列函数的消息验证码（Hash-based Message Authentication Code， HMAC）。
发送端生成的消息验证码。--- 基于单向散列函数算法实现。

HMAC算法:HMAC(对称密钥,明文)

四、消息验证函数为什么还需要对称密钥呢？
算法内容 是 HMAC(对称密钥,明文)，为什么不是 HMAC(明文) 呢，这样接收端一样可以获取一个值，用来校验完整性啊。

原因是这样不能防止中间人攻击。
信息发送方把待验证信息和消息验证码都发送给信息接收方。假设存在一个中间攻击者，能够解开待验证信息和消息验证码。由于单向散列函数是公开的算法，中间攻击者就可以篡改待验证信息，重新生成消息验证码。
然后，中间攻击者把篡改的信息和篡改的验证码发给信息接收方。篡改的信息和篡改的验证码能够通过信息接收方的信息验证。也就是说，这样的话，信息接收方就没有办法识别出这个信息是不是原始的、没有篡改的信息。这样，信息验证就失效了。

可是，如果对称密钥参与了消息验证码的运算，由于中间攻击者并不知道对称密钥的数据，攻击者就很难伪造出一个能够通过验证的消息验证码。

五、怎么计算HMAC算法的强度？
HMAC算法与对称密钥和单向散列函数息息相关，一般情况下，单向散列函数安全性已经ok。
因此HMAC算法的强度，通常也是由对称密钥决定。简单起见，对于流行的HMAC算法，我们只需要考虑对称密钥的安全强度。

六、TODO
以前文章，讲解的是加密算法，解决机密性的问题。
本文章，是使用hmac方法，解决完整性问题。

有没有一种加密算法，综合考虑了 完整性和机密性呢？如果有，我们就不需要额外的设计消息验证码了。
下一次，我们来讨论这个问题。