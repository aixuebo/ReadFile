一、背景与总结
1.上一节，讲了初始化向量对算法安全性的影响，本节课讲链接模式对算法安全性的影响。
2.ECB模式,因为不需要初始化向量，带来了不安全因素。了解没有初始化因素，为什么会带来安全问题。
a.通过碰撞库,知道 明文与密文的映射关系，因此得到密文后，可以反编译成明文。
b.通过分组重放攻击，将密文信息中增加几个分组内容，对数据进行窜改。

二、链接模式
链接模式指的是如何把上一个分组运算和下一个分组运算联系起来，使得上一个分组运算可以影响下一个运算。

第一个数据分组密文 = 加密函数(明文分组1,密钥,初始化向量) ---> 分组密文。
第二个数据分组密文 = 加密函数(明文分组2,密钥,上一个分组密文) ---> 分组密文。

三、非链接模式具体实现 -- ECB模式 --- 不安全,已经废弃
1.ECB模式，不需要链接模式，因此也就不需要密钥。
即:数据分组密文 = 加密函数(明文分组,密钥)

2.优点
a.不需要同步初始化向量，代码更简单。
不使用链接模式，就意味着上一个分组运算不影响下一个分组运算，每一个数据分组的运算都是独立的。
代码实现上简单。
比如 
Cipher cipher = Cipher.getInstance("AES");
cipher.init(Cipher.DECRYPT_MODE, secretKey);

同步初始化向量则复杂的多。
byte[] ivBytes = 初始化向量
IvParameterSpec ivParameters = new IvParameterSpec(ivBytes);//同步初始化向量对象
Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
cipher.init(Cipher.DECRYPT_MODE, secretKey, ivParameters);//同步信息:算法+密钥+同步的初始化向量。

b.每一个分组运算都是独立的，也就意味着可以并行地运算，也不必按照次序运算。
意味着运算效率的大幅度提高。

四、ECB模式，带来的安全问题
1.因为缺失初始化向量,因此相同的明文分组就会被加密成相同的密文分组。因此带来了安全问题。

2.不安全例子
a.明文:ABCDEFGHHIJKLMNO0123456789012345
b.数据分组:当我们使用AES-128/ECB算法加密时，我们需要把这段数据分组成两个明文分组：
ABCDEFGHHIJKLMNO
0123456789012345
c.密钥:1234567890123456
c.加密,得到2个分组密文:
1389AE9853633EBF3D35F28987FCD118
7B4BFC89DD1700154482BC7EB686BB0E

3.不安全的问题场景
比如http头,我们大多数明文信息都是一致的。只是部分要传递的明文信息是不清楚的。
因此通过碰撞库，即构造重复已知的明文+构造常用密钥 ，生产密文。而密钥是有库可以获取的，而明文分组后又非常小。
因此有了一个数据库，即 明文分组-->密文分组 映射。

因此在不需要解密的情况下，通过碰撞库，就可以知道用户发的信息是什么。
即 如果我们知道数据块对应的密文，我们就可以通过寻找重复的密文，在没有密钥，也不执行解密操作的情况下，知道对应的数据块。
比如下面的密文：
7B4BFC89DD1700154482BC7EB686BB0E1389AE9853633EBF3D35F28987FCD118
对应的数据块是：
0123456789012345ABCDEFGHHIJKLMNO

4.你可能会有疑问，数据都是加密的，攻击者怎么会事先知道数据块和对应的密文呢？
其实，互联网世界里，已知重复的、位置确定的数据非常多，HTTP的头部数据，HTTPS数据包的头部，URL等都是重复频率很高的数据。
只要通过定位数据块，锚定对应的密文，就可以利用已知数据块和密文寻找、推断未知数据了。

同时很多应用中，注入特定明文数据、获取对应密文信息的攻击也是轻而易举的事情。
如果攻击者没有“0123456789012345”的密文信息，他可以构造一个这样的明文，然后让密钥持有者加密，然后他就可以获得对应的密文分组。

即我虽然不知道密钥，但我可以给你一个明文，让你帮我加密，我就知道加密的结果了。有一些协议是这样的，可以让对方把加密结果返给我的。

5.更严重的不安全问题 -- 上面的不安全问题，都停留在偷看数据而已，更严重的是更改信息。
通过分组重放攻击，将密文信息中增加几个分组内容，对数据进行窜改。

a.比如:
张三于二零二零年八月二十二日向李四借款人民币三十圆整，立此为证。

假设我们加密运算时，这段数据被分割成如下的四个分组：

张三于二零二零年
八月二十二日向李
四借款人民币三十
圆整，立此为证。

b.比如:
王二于二零二零年八月二十二日向李四借款人民币三十亿四千五百万六千圆整，立此为证。
假设在加密运算时，这段数据也被分割成如下的五个分组：

王二于二零二零年
八月二十二日向李
四借款人民币三十
亿四千五百万六千 --- 增加一组信息
圆整，立此为证。


c.如果有了明文，还有了对应的密文，我们就可以重新编排密文数据，以获得想要的结果。

如果使用了ECB，我们可以把“亿四千五百万六千”这段明文分组对应的密文分组删除，那么解密的结果就是：王二于二零二零年八月二十二日向李四借款人民币三十圆整，立此为证。


我们也可以把“亿四千五百万六千”这段明文分组对应的密文分组插入到第一段数据的密文数据里。那么，修改的密文数据解密结果就是：
张三于二零二零年八月二十二日向李四借款人民币三十亿四千五百万六千圆整，立此为证。

这样的结果，和原始数据相差甚远。这种攻击方式，就是常说的“分组重放”攻击。
