一、背景与总结
1.常用算法
AES/GCM；
ChaCha20/Poly1305；
AES/CCM。


二、AEAD有风险吗？ ---- 使用好不重复的初始化向量，他就是相对来说，非常安全的。
1.AEAD 需要初始化向量。而初始化向量如何避免重复使用，就是安全性风险的评估标准，如果能做到避免重复使用，则还是很安全的。
2.避免重复使用的方案 --- 随机数
初始化向量随机数是可以公开发出去的，因此接收端也就解决了如何同步初始化向量的问题。
其次，AEAD有自我验证能力，因此如果有攻击者修改了明文传递的初始化向量，信息接收方是能够察觉的。
最后,为了避免随机数的重复，建议设置足够大的空间池，比如64位的初始化向量，支持2^64的加密运算。大部分的应用程序都难以达到这么大的运算量。即很多程序是用不到这么多次加密计算的。

3.避免重复使用的方案 --- 使用序列数
a.对于AEAD算法，只要初始化向量不重复就行，并不要求初始化向量不可预测。使用序列数作为初始化向量，就是一个最流行的方案。
b.如果使用序列数，你需要注意的是，使用静态的对称密钥，特别需要注意序列数的静态化。比如说，对称密钥存在磁盘上，每次启动程序，都加载该密钥。那么，如果序列数没有对应的保存下来，每次启动的应用程序就有可能使用重复的序列数，
从而带来严重的安全问题。
c.即使初始化向量是序列数生产的，也要公开的传递出去；同时用0补齐位数，让其一直传递的都是64位数。
这样接收端就统一接收方式与数据格式，是一个非常好的接口约束规范。