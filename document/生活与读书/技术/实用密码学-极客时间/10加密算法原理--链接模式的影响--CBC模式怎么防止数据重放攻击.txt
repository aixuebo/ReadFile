一、背景与总结
1.CBC模式,使用初始化向量和链接模式,因此解决了ECB模式的安全问题，尤其数据重放攻击带来的安全问题。
CBC模式，可能是2018年之前最常用、最常见的加密模式。可是，从2018年开始，由于它的安全问题，CBC模式开始退出历史舞台，尽管这一进程可能需要十数年，甚至数十年。


二、为什么还要学习CBC模式
1.CBC的退出进程可能需要十数年才能完成，因此工作中可能还是会遇到。
2.学习针对CBC的攻击方案,更了解数据安全的攻击方案。更理解算法原理。

三、CBC模式 -->  Cipher Block Chaining
1.加密
在CBC模式中，明文分组在加密之前，要与前一组的密文分组进行异或运算，异或运算的结果会参与加密函数的运算。
即每一组密文 = 加密函数(明文分组 异或运算 上一组密文分组结果,密钥)
即参与运算的是 明文+上一组密文的组合结果。

2.解密
A = 解密函数(密文分组,密钥) = 明文分组 异或运算 上一组密文分组结果。
想要获取真正的明文，需要 A 异或运算 初始化向量/上一组密文分组。

3.产生的问题
a.解密过程
初始化向量只影响第一个明文分组，并不影响后续的解密过程和明文分组。
因此 一个密文分组，只影响它的下一个明文分组，并不影响更后面的解密过程和明文分组。
b.加密过程
每一个密文分组，都依赖于前面所有的明文分组，包括初始化向量。

因此加密与解密是不同的依赖关系。因此解密可能就存在漏洞。

四、初始化向量需要保密吗？
初始化向量并不需要保密。如果你对这一点有疑问，不妨换个角度想一想：每一个分组加密的初始化向量都是上一次加密运算得到的密文分组，而密文分组是可以公开的信息。
因为密文本身是公开传递的，而初始化向量就等同于第一次的密文，所以自然也不需要保密。


五、异或运算会不会有问题？
1.异或运算为什么它在密码算法里如此广泛？
a.异或运算是按位运算，所以在相同的计算环境下，异或运算时间只和数据的位数相关，和数据的实际数值无关。放在密码学算法的世界里，如果运算时间和实际数值无关，那简直再好不过了。
换句话说，如果运算时间和数据数值相关，而且别人还了解到这种相关性，他就可以通过统计学的方法，通过观察、测算运算时间，找到运算时间和数据数值之间的关联，来破解密码。
b.按位运算，在相同的计算环境下，异或运算的复杂度，也就是需要的算力，只和数据的位数相关，和数据的实际数值无关。
c.异或运算的运算特点有关，也就是相同的数据归零，不同的数据归一。
归零律：如果两段数据完全相同，它们的异或运算结果，就是每一位都是零的数据；
恒等律：如果一段数据和一段全是零的数据进行异或运算，前一段数据中是零的位运算后还是零，是一的位运算后还是一。也就是说，和零进行异或运算，不改变原数据的数值。
正是异或运算的归零律和恒等律，CBC模式才能成立，解密才能进行。这两个性质，还使得解密运算和加密运算具有相同的运算效率。

2.CBC模式的主要安全问题，也来源于异或运算的这两个性质。
假设两段数据中只有一位不同，它们的异或运算结果，就是只有这一位的数据是一，其他的数据都是零。
那是不是我们就可以通过构造明文分组或者密文分组，一次改变一位数据，然后把数据交给加密运算或者解密运算来处理，通过观察加密或者解密的结果展开攻击了？

-------- -------- -------- -------- -------- -------- -------- 
思考题，暂时看不懂，可以未来再阅读。
由于过于烧脑，而且感觉也不用花时间研究这么深入。所以第11、12节不在阅读记录笔记。


比如说，一个128位的密钥，它的强度能承受2^128次的运算，是一个强度的指数级别的量级。

如果我们一次改变一位数据的攻击方式得逞，最多需要128次的运算；
如果我们一次只能观测一个字节，一次一位的改变需要2^8 = 256次，这样的攻击方式得逞，最多需要255 * 16 = 4080次的运算。
这样的运算强度，和设计的理论值2^128相差太远了，一次有效的破解也就是分分钟的事情。

还别说，这样的攻击方式在实践中真的是可行的。这种攻击方式，把CBC模式变成了一个充满陷阱的模式。用的好，它就是安全的；用的不好，它就会惹来麻烦。这实在不符合密码算法要皮实、耐用的要求。

阻断一个攻击的方式之一，就是破坏攻击依赖的路径或者条件。对于上面的攻击方式，其实只要攻击者没有办法一次改变一位数据或者少量的数据，这样的攻击就可以被有效破解了。

也就是要保证攻击者在展开攻击的时候，没有办法一次改变不少于一个数据分组的数据。对于AES来说，数据分组大小是128位，攻击者需要运算2^128次，才可以攻击得逞。

计算量这么大，攻击者的攻击方式就无效了。那我们怎么做才能让攻击者没办法呢？

密文分组、密钥、加密算法、解密算法，这些都是固定的数据或算法，没有考量的空间。剩下的变量，就只有明文分组和初始化向量了。要想解决掉这个安全问题，该怎么控制明文分组和初始化向量？异或运算又是怎样带来麻烦的？

要想深入地了解这些问题，有点烧脑。下一次，我们集中精力来讨论、分析其中的细节和办法。

由于过于烧脑，而且感觉也不用花时间研究这么深入。所以第11、12节不在阅读记录笔记。
