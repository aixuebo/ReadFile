一、背景与总结
1.对称密钥的常见算法，实现上大概分序列算法和分组算法。
推荐优先使用序列算法，因为性能好，并且皮实。推荐AES-256和AES-128。

2.本文主要讲解分组算法。

3.为什么需要初始化向量
链接模式需要上一个分组的运算结果，但第一个分组并没有上一个分组，因此需要初始化向量作为参数。

4.初始化向量不怕传出去
因为他的目的并不是用于加密，而是用于每一次的加密结果是不同的，即使相同的明文，多次加密，也会因为初始化向量是不同的，密文结果不一致。
因此传出去也无所谓。

所以算法传出的内 其实是密文+初始化向量。

初始化向量并不需要保密。如果你对这一点有疑问，不妨换个角度想一想：每一个分组加密的初始化向量都是上一次加密运算得到的密文分组，而密文分组是可以公开的信息。
因为密文本身是公开传递的，而初始化向量就等同于第一次的密文，所以自然也不需要保密。

5.解决为什么一个密钥不能一直使用，而是需要定期更换的疑问。
参考六。

二、如何计算分组算法
1.算法步骤
a.数据分组 ---> 对数据进行分组。
b.分组运算 ---> 对每一个分组进行计算。
c.链接模式 ---> 每一个分组运算的结果，如何组装。

分组的结果,组合起来,就是密文。

加密过程:
a.加密函数(明文分组,密钥,初始化向量/上一个分组密文) --> 分组密文。
b.所有分组密文结果拼接，就是最终密文结果。

解密过程:
a.解密函数(分组密文,密钥,初始化向量/上一个分组明文) ---> 分组明文
b.所有分组明文结果拼接。

加密/解密传输的内容: 初始化向量 + 密文内容。


2.数据分组
加密函数只能处理固定长度的数据，因此要对明文进行分割。
比如 AES算法处理128位数据。
如果不能整分,最后一个分组要补齐128位。

解密时，执行相反的操作，把补齐数据去掉，再把数据分组组合成完整的明文数据。

3.分组运算
加密函数(分组明文,密钥,链接模式需要的字符串) ---> 分组密文

4.链接模式
指的是如何把上一个分组运算和下一个分组运算联系起来。
因为第一个分组运算并没有上一个分组运算可以使用，所以就需要引入初始化的数据。

三、链接模式的意义是什么？ 为什么要把上一个分组运算和下一个分组运算联系起来呢？
1.因为好的加密算法，要与“单向散列函数”一样，明文的任意元素发生变化，最终密文要完全变化。即产生雪崩效应才好。比如MD5。
2.更升级一下，相同的明文，即是再加密一次，由于初始化向量的不同，也要导致密文的结果也完全不同。
只有满足这两个条件，最终拿到密文的人，不会通过碰撞的方式，推测出明文是什么。

而如果加密函数(分组明文,密钥) --> 分组密文。 意味着每一个明文分组是独立的。很难满足1条件，即明文某一分组发生变化，密文也只是这一分组有变化，其他分组不变化。

四、什么影响了算法的安全性
1.算法的过程中，有5个参数，因此安全性来自于5个参数。
a.加密函数和解密函数； ---- 公开的算法，安全性来自于算法本身。
b.密钥； --- 密钥如何保存，以及如何生产高安全性的密钥字符串。重点是如何保存密钥，主要关注密钥的生产安全性。
c.初始化向量 --- 因为初始化向量是随机产生的。
d.链接模式；---- 确保了加密结果的雪崩效果。
e.数据补齐方案 --- 会产生漏洞,需要关注。

a和b以前的课程已经讲过了，接下来主要关注后3个的安全性知识。

五、初始化向量 -- 应该如何选。
1.在一个对称密钥的生命周期里，初始化向量不能重复。 即密钥不变的情况下，初始化向量如果有重复，则结果会不安全。
第一个分组计算 = 加密函数(分组明文,密钥,初始化向量)

如果有相同的明文信息要传递(比如http头,大多数内容都是相同的，因此第一个分组明文基本上是确定的)、密钥被重复使用、初始化向量如果是固定随机数。
因此相同的输入，就会有相同的输出，这个是不安全的。

对于大部分算法而言，分组数据块都比较小，比如，AES算法的分组数据块大小是16个字节。这样，在实际应用中，就比较容易构造相同的数据块，或者存在相同的数据块。


2.初始化向量生产的常见的办法有两种：
a.使用安全强度足够的随机数作为初始化向量；(推荐)
b.使用序列数，下一次的初始化向量的数值，比上一次的数字自动加一或者自动减一。

产生的问题:
a.随机初始化向量带来的问题
随机数的获取，有时候不是一个有效率的运算。如果随机数发生器选择不当，还会造成加密运算的阻塞，进一步降低加密运算的效率。
如果初始化向量是随机的,那解密端如何获得这个随机的初始化向量。

一个常见的解决办法，就是把初始化向量和加密数据一起发送给对方。

b.序列数带来的问题
使用序列数，需要保持序列数的状态，还需要加密运算的同步。
问题如下:
分布式计算环境下的序列数同步问题；
攻击者会知道每一个初始化向量的问题。

六、为什么一个密钥不能一直使用，而是需要定期更换。
因为 在一个对称密钥的生命周期里，初始化向量不能重复。
主要初始化向量要随机生产，但初始化向量的位数是固定的，因此如果密钥不变化的情况下，初始化向量的位数决定了初始化向量的不同个数。也就意味着初始化向量是有数量限制的。
所以一个密钥 只能使用X次，就要被更换。X表示初始化向量的不同次数。

比如，一个128位的初始化向量，最多有2^ 128个不重复的数值。进一步的说，对于这个算法，一个密钥最多只能使用2^ 128次。
的确看起来，2^128是一个巨大的数字，一般的应用程序也没有什么机会使用这么多次加密运算。

七、TODO 未来课程预告
之后的两讲，我们就接着今天的话题，看看除了初始化向量之外，链接模式和数据补齐方案是怎么影响对称密钥算法的安全性的？



