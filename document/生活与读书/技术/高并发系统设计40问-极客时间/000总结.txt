一、提高查询性能
1.底层mysql要先提升。
通过读写分离，提高多个读库，提升查询吞吐量。
通过分库分表，对服务进行拆分，解决查询响应问题。

2.底层nosql数据库使用，配合关系型数据库，提升查询效率。
用在写入多，读少的场景。
es、levelDB/redis基本就够用了。

3.缓存，避免数据达到物理存储层，提高查询吞吐量，抗住高并发。
第13节要解决的问题是 缓存与数据库双写后，一致性问题。因为很少场景是频繁变更数据库信息 同时 还要要求 缓存与数据库强一致性的场景。那么牺牲短暂的一致性，追求最终一致性是可以有解的。
第14节要解决的问题是，缓存数据高可用的问题，避免单一缓存节点挂了，数据绕过缓存都读数据库的问题。
缓存高可用的前提还是已经解决了缓存+数据库的一致性问题。
第15节，已经解决了一致性+高可用后，如何解决缓存穿透等缓存面临的问题。

4.CND,避免数据到缓存。

5.消息队列 --- 消峰，让缓存、底层数据库都稳定的接收数据。
场景:高并发写请求的场景中，比如秒杀。特点是读请求极高，写请求也很大，但能允许成功写入的请求很少，比如就200单。