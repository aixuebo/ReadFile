一、背景与总结
1.第8节，已经解决了数据库可以抵抗高并发和大流量的冲击的读写冲击。
但仍有一些问题无法解决。
比如微博的关系表，其实已经达到千亿了，那么即使分隔成1024个库表，每张表的数据量也达到了亿级别，并且关系的数据量还在以极快的速度增加，即使你分隔成再多的库表，数据量也会很快增加到瓶颈。
这个问题用传统数据库很难根本解决，因为它在扩展性方面是很弱的。

2.不代表NoSql一定是KV存储数据库。Elasticsearch也是NoSql
所以微博的关系表，可以存储在Elasticsearch这种倒排索引关系里，更为合适。
自己的id作为term，与自己关系的人，作为posting list。并且在posting list可以有一定规则的顺序存储。用于快速给核心的人发送信息。
该顺序可以动态变化，比如互动越多，比如越重要的粉丝，越靠前。


二、NoSQL
1.它不使用SQL作为查询语言，提供优秀的横向扩展能力和读写性能。
Redis、LevelDB这样的KV存储；
Hbase、Cassandra这样的列式存储数据库；
像MongoDB、CouchDB这样的文档型数据库。

2.他只是弥补了传统数据库的不足，但不能替代传统数据库。
因为慢慢地我们发现在业务开发的场景下还是需要利用SQL语句的强大的查询功能以及传统数据库事务和灵活的索引等功能，NoSQL只能作为一些场景的补充。

3.NoSQL数据库都在使用的基于LSM树的存储引擎，所以写入性能极高。

三、Nosql的场景补充案例
1.假设某一天，CEO找到你并且告诉你，他正在为你的垂直电商项目规划搜索的功能，需要支持按照商品的名称模糊搜索到对应的商品，希望你尽快调研出解决方案。
类似"select * from product where name like ‘%***%’",扫描全表的数据，在性能上是无法接受的。
可以替换使用Elasticsearch解决。
存储关键词 --> 商品名称List的倒排索引。

四、NoSQL有着天然的提升扩展性能力。
1.副本，Replica。其实就是主从分离。
用于分担读数据的压力；用于数据故障灾难的备份。
2.分片，Shard，其实就是 数据库的 分库分表。
即将数据按照某种规则拆分成多份，存储在不同的机器上。
