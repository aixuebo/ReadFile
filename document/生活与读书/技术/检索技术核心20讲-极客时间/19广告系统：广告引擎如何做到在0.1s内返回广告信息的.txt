一、背景与总结
1.那在大型广告系统中，广告的请求量其实非常大，每秒钟可能有几十万甚至上百万次。因此，广告系统是一个典型的高并发低延迟系统。
事实上，这背后离不开一个高性能的广告检索引擎的支持。即如何做到检索在0.1秒内返回匹配的广告结果的。

二、广告服务器流程
1.请求链路：广告服务器收到请求，参数用户id、广告位id、请求扩展信息 ---> 返回广告。
2.广告服务器能做的是什么
a.通过user_id，可以获取用户画像信息。
b.通过广告位信息,获取该广告位的页面分类等属性信息。比如是体育广告位。
c.广告信息，即广告投放的时候，广告主设置条件，比如北京、年龄段、爱好等。
d.通过综合信息，返回用户合适的广告。
即本质上就是 匹配用户与广告的标签，返回排序结果的过程。

三、标签检索：合理使用标签过滤和划分索引空间
1.将广告设置的标签作为Key来构建倒排索引，在posting list中记录对应的广告设置列表。
比如广告主设置的标签是地域北京，因此将北京作为标签，posting list存储该标签对应的广告集合。
设置标签篮球，则posting list对应喜欢篮球的广告集合。

但是比如投放媒体:app，基本上所有广告都有这个标签，那意味着标签背后的posting list是所有的广告id集合，很明显他不适合做标签进行索引。
优化：使用TF-IDF算法中的IDF逆向文件频率 = 出现该词频的文件次数/总文件次数，找到核心的标签去做索引。

2.为标签编码
比如使用4个字节32位的整数表示一个编码，可以让前8位(有256种分类的可能)表示大类别，后24位表示小类别。
比如地域：北京，前8位表示地域，后24位表示该地域的具体值背景。

3.针对性别、投放媒体(app/pc)这种区分度不是很明显的标签，他虽然不会被索引。
但由于他区分度不够明显，显然使用的时候是要配合其他标签一起用的。因此建议不同组合的标签使用不同的索引，单独索引。
因此结果是一棵由于不同标签的组合索引组成的索引集合树。

比如:
媒体类型APP -- 性别男 -- 其他明显区分度标签
媒体类型PC -- 性别男 -- 其他明显区分度标签

四、打分排序：用非精准打分结合深度学习模型的精准打分
广告引擎除与传统的搜索引擎不同点是，返回给用户的只有一条广告，因此要求返回的广告精准度高。

所以要求精排序时，就要用复杂的深度学习算法来打分，对打分性能要求高，因此如果粗排序的结果很多，那复杂深度学习精排序后很难满足0.1秒返回结果。

因此解决方案是:
a.粗排序
b.我们可以基于简单的机器学习模型（如逻辑回归模型（LR）、梯度提升决策树（GBDT）、因子分解机（FM）等）配合少量的特征，做非精准打分。
c.复杂的神经网络打分。

五、索引精简：在索引构建环节缩小检索空间
好在，广告投放设置的体量一般不会像网页数那么庞大，一般都可以全部加载到内存中，因此，我们使用全量索引结合增量索引的更新机制，就可以对线上的索引进行实时更新了。
仅为当前有效的广告设置进行索引，这样检索空间也就得到了大幅压缩。

广告特点：广告设置的生命周期变化非常快；并且他没有像搜索引擎存储那么多的网页。
比如
当广告设置限定了投放的时间段时，那这个广告可能上午是有效的，下午就处于停投状态了。
再比如说，如果广告预算花完了，那广告也会变为停投状态，但是充值后又会恢复成有效状态。

