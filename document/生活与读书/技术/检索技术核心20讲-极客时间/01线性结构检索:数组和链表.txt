一、背景与总结
1.数组的查询效率高，利用二分法即可。但插入和删除效率慢。
链表反之。
如何利用两者的优点，组合成高效的算法，是研究课题。

二、数组
1.特点
连续的内存空间，存储数据。 ----- 可随机访问的高性能特点。
空间受限，比如申请100G空间，可能就申请不到。


三、链表
1.特点
空间不受限，通过个指针按顺序将这些空间串起来，形成一条链。
即存储形式 : 数据+next地址

四、查询效率
1.有序可以提高效率
如果是无序存储，则无论是链表还是数组，都只能遍历的方式判断元素是否存在。O(n)
如果是有序存储,则利用二分法,可以提高查询效率。O(log n)

2.数组查询效率
在有序数组应用二分查找时，O(1)可以查询到二分位置。效率非常高，N次二分就是0(N)。

3.链表查询效率
因为链表不具备 随机访问的特性，因此有序的链表好像也没法儿提高检索效率啊。
要想用二分法查找，复杂度较高。只能一个一个查找，平均是O(链表长度/2)。

链表虽然查询效率弱，但插入和删除只需要O(1)。
而数组则需要移动位置,其实是O(n)的插入和删除代价。

五、如何灵活改造链表提升检索效率？

比如说，如果我们觉得链表一个节点一个节点遍历太慢，我们很容易就能想到一个改进方案，那就是让链表每个节点不再只是存储一个元素，
而是存储一个小的数组。这样我们就能大幅减少节点的数量，从而减少依次遍历节点带来的“低寻址效率”。

比如说，我的链表就只有两个节点，每个节点都存储了一个小的有序数组。这样在检索的时候，我可以用二分查找的思想，
先查询第一个节点存储的小数组的末尾元素，看看是否是我们要查询的数字。如果不是，我们要么在第一个节点存储的小数组里，继续二分查找；
要么在第二个节点存储的小数组里，继续二分查找。这样的结构就能同时兼顾数组和链表的特点了，而且时间代价也是O(log n)。

比如存储格式为  数据+数据+数据+next
