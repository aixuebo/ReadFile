一、背景与总结
1.精准查找，即一定要找到附近最最最近的xxx地方。
举个例子，突然发现车快没油了，虽然最近8个区域也没有加油站，但地图又必须要返回最近的k个结果。
同理医院、超市等，系统必须不断扩展查询区域，直到返回K个结果为止，这个对检索带来的挑战。

2.参考图4、图5、图6

二、查询方案
1.假设我们当前地址的GeoHash编码为wx4g6yc8,查找附近加油站步骤
查询当前区域下有没有加油站，如果没有，则扩大范围。
方案1  采用细粒度的扩展，即二进制下的编码，一个格子一个格子的扩展；查询最近8个附近的格子，依次扩张最近16格子，即横坐标、纵坐标+-2个单位。
方案2  采用粗粒度的扩展，即对geohash编码扩展。因为每一个字符都是5个bit,因此变化一个字符都会扩展范围会很大。即每次取消最后一个字符，先查询wx4g6yc，再查询wx4g6y。

2.查询效率
方案1,查询次数太多，因为每次粒度太细。
方案2,查询次数少，比如GeoHash就8位，最多也就检索8次。所以推荐使用该方案进行检索。

3.实现案例
因为GeoHash是字符串，可以排序，因此可以借助B+树索引的特性，即同一层的GeoHash编码是有顺序的。可以顺序扫描的特点，即进行范围查询。
举个例子。在检索完wx4g6yc8这个区域编码以后，如果结果数量不够，还要检索wx4g6yc这个更大范围的区域编码，我们只要将查询改写为“查找区域编码在wx4g6yc0至wx4g6ycz之间的元素"
就可以利用同一个索引，来完成更高一个层级的区域查询了。
同理，如果结果数量依然不够，那下一步我们就查询“区域编码在wx4g6y00至wx4g6yzz之间的元素”，依此类推。


这种方案有一个缺点，那就是在每次调整范围查询时，我们都要从头开始进行二分查找，不能充分利用上一次已经查询到的位置信息，这会带来无谓的重复检索的开销。

三、优化查询方案 --- 如何利用四叉树动态调整查询范围 --- 应对的是二进制的编码
1.geohash的编码，只是用于使用者的查看视角，其实背后存储的还是二进制，只是在展示的时候每隔5bit编码成一个字符而已。
因此我们可以使用树形结构来存储索引。而且是四叉树，原因是每次分割都是划分4块。
参考图4 -- 满四叉树。

2.如何利用四叉树特点,自动调整范围的Top K检索呢
假设一个人所属的最小区域编码是0110，那我们在检索的时候，就以0110为Key，沿着四叉树的对应分支去寻找相应的区域，查询路径为01-10。如果查找到了叶子节点，并且返回的结果大于k个，就可以直接结束检索。
如果返回结果不足k个，我们就得递归返回到上一层的父节点，然后以这整个父节点的区域编码为目标进行检索。这样，我们就避免了要再次从树根检索到父节点的开销，从而提升了检索效率。

参考图4 -- 满四叉树。

四、如何利用非满四叉树优化存储空间？
参考图5

在数据稀疏的时候，许多叶子节点中的数据可能是空的，这就很有可能造成大量的空间浪费。为了避免出现空间浪费，我们有一种改进方案是，使用动态节点分裂的非满四叉树。

首先，我们可以给每个叶子节点规定一个容纳上限。比如说，我们可以将上限设置为n。
一开始的四叉树只有一个根节点，这个根节点同时也是叶子节点，它表明了当前的全部空间范围。当有数据加入的时候，我们直接记录在这个节点中，查询时也只查询这个节点即可。
随着加入的数据越来越多，如果一个叶子节点的容量超出了容纳上限，我们就将该节点进行分裂。
a.会为该节点，创建1~4个子节点，把该节点的内容，分配到对应的1~4个子节点里。
注:有一种极端的情况是，这些数据都会转入到同一个下层叶子节点上。这时，我们就需要继续分裂这个叶子节点，直到每个叶子节点的容量在阈值下为止。

五、如何用前缀树优化GeoHash编码的索引？ --- 即不是四叉树，而是32叉树，应对的是geohash编码，而非二进制编码，但逻辑是相同的
参考图6
对于字符串的检索，有一种专门的数据结构，叫作前缀树（Trie树）。
当使用GeoHash编码来表示区域时，我们可以建立一个前缀树来进行索引，前缀树的每个节点最多会有32个子节点。
