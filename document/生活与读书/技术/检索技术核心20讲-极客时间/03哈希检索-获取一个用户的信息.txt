一、背景与总结
1.hash(key) 理论上是O(1)，其实是O(1) + 二分查找的链表红黑树实现O(log n) 


二、hash(key),结果转换为数组下标，从而实现O(1)检索效果
1.如果key是字符串,如何转换成bigint
字母映射,比如tom = 20 * 26^2 + 15*26 + 13。
md5等哈希算法。

2.如果key的空间很大,数组无法申请这么大的空间该怎么办呢
hash确定有限数组边界 + key冲突时队列或者链表方式。 ---- 最常用的两种冲突解决方案是“开放寻址法”和“链表法”。

三、如何利用开放寻址法解决Hash冲突 --- 不推荐使用，复杂，并且性能也不够好。

四、如何利用链表法解决Hash冲突
数组 + 链表 的组合方法。既利用了数组的随机访问特性，又利用了链表的动态修改特性，同时提供了快速查询和动态修改的能力。
在数组中不存储一个具体元素，而是存储一个链表头。如果一个Key经过Hash函数计算，得到了对应的数组下标，那么我们就将它加入该位置所存的链表的尾部。


但是，如果链表很长，遍历代价还是会很高。那我们有没有更好的检索方案呢？你可以回想一下，在上一讲中我们就是用二叉检索树或跳表代替链表，来提高检索效率的。
实际上，在JDK1.8 之后，Java中HashMap的实现就是在链表到了一定的长度时，将它转为红黑树；而当红黑树中的节点低于一定阈值时，就将它退化为链表。

五、哈希表有什么缺点？
1.需要更多的内存空间
哈希表接近O(1)的检索效率是有前提条件的，就是哈希表要足够大和有足够的空闲位置，否则就会非常容易发生冲突。
按经验来说，我们一般要预留一半以上的空闲位置，哈希表才会有足够优秀的检索效率。这就让哈希表和有序数组、二叉检索树相比，需要的存储空间更多了。

2.失去了“有序存储”这个特点。
因此，如果我们的查询场景需要遍历数据，或者需要进行范围查询，那么哈希表本身是没有什么加速办法的。
