一、背景与总结
1.试想这样一个场景：假设你已经熟读唐诗300首了。这个时候，如果我给你一首诗的题目，你可以马上背出这首诗的内容吗？相信你一定可以的。但是如果我问你，有哪些诗中同时包含了“极”字和“客”字？
你需要在头脑中一首诗一首诗地回忆，并判断每一首诗的内容是否同时包含了“极”字和“客”字。
2.解决两个集合的 交集、并集、差集数据场景。
查询包含“极”和“客”字的诗。--- 交集
查询包含“极”或“客”字的诗。--- 并集
查询包含“极”且不包含“客”的诗。--- 差集
3.复杂度
N个词查询倒排索引O(1) + 索引结果的merge操作O(m + n)


二、正排索引 -- Forward Index
1.给出一首诗的题目，马上背出内容。这其实就是一个典型的键值查询场景。key是诗的题目对应的ID，value是诗内容。查询效率是O(1)。
2.遍历哈希表中每一首诗，遍历的时间代价是O(n)。
3.我们需要遍历这首诗中的每一个字符，才能判断是否包含“极”字和“客”字。假设每首诗的平均长度是k，那遍历一首诗的时间代价就是O(k)。

从这个分析中我们可以发现，这个检索过程全部都是遍历，因此时间代价非常高。对此，有什么优化方法吗？

三、倒排索引 -- Inverted Index
1.定义
我们会发现，“根据题目查找内容”和“根据关键字查找题目”，这两个问题其实是完全相反的。既然完全相反，那我们能否“反着”建立一个哈希表来帮助我们查找呢？
如果我们以关键字作为key建立哈希表，是不是问题就解决了呢？

key是诗的关键词，value是包含关键词的文档集合。根据关键字来查询这个哈希表，O(1)。
这种根据具体内容或属性反过来索引文档标题的结构，我们称之为 倒排索引。


在倒排索引中，key的集合叫作字典（Dictionary），一个key后面对应的记录集合叫作记录列表（Posting List）。


四、如何创建倒排索索引
1.步骤
a.给每个文档编号，作为其唯一的标识，并且排好序，然后开始遍历文档（为什么要先排序，然后再遍历文档呢？解释，参考五）。
b.对每一个文档,分词,生产<关键字，文档ID，关键字位置>数据。(为什么要记录关键字位置这个信息呢？因为在许多检索场景中，都需要显示关键字前后的内容，比如，在组合查询时，我们要判断多个关键字之间是否足够近。)
c.将关键字作为key插入哈希表。
如果哈希表中已经有这个key了，我们就在对应的posting list后面追加节点，记录该文档ID（关键字的位置信息如果需要，也可以一并记录在节点中）；
如果哈希表中还没有这个key，我们就直接插入该key，并创建posting list和对应节点。
d.重复第b步和第c步，处理完所有文档，完成倒排索引的创建。

五、如何查询同时含有“极”字和“客”字两个key的文档。
1.步骤
a.分别查询关键词,得到两个doc集合，A和B。
b.获取A和B的交集即可。

2.如何获取A和B的交集
如果A和B无序,则判断交集复杂度高，需要两重循环。O(m*n)。
如果有序,并归排序,O(m + n)。

六、多路并归
即实际查询的时候，可能不只是两个关键词对应的集合关系，而是N个关键词对应的集合关系--交接、并集、差集。
