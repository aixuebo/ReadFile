一、背景与总结
1.ACID是支持事务的标准，原因是单机版场景，可以通过锁、时间序列等机制保障操作的顺序执行。
分布式难点在于涉及多个节点间的操作。加锁、时间序列等机制，只能保证单个节点上操作的ACID特性，无法保证节点间操作的ACID特性。
2.分两阶段提交 --- 核心原理
a.单节点是可以完成事务的，即因此提交给一个节点信息，理论上经过无限重试后，该节点肯定可以独立执行完成。
b.第一阶段提交的目的，就是去各个节点申请资源，得到response后，说明每一个阶段已经拿到了资源。
c.第二阶段就让各个节点的资源执行具体业务逻辑，该逻辑属于单节点问题，不需要跨节点，所以一定会独立完成。


二、案例
1.案例背景
如何高效协同赵、魏、韩一起行动，并且保证当有一方不方便行动时，取消整个计划。
赵、魏、韩明天攻打秦国，这三个操作组成一个分布式事务，要么全部执行，要么全部不执行。

三、二阶段提交协议
1.步骤
a.三个节点先选择一个协调者（Coordinator）-- 赵。
b.客户端请求协调者，赵接收到消息后，由赵联系魏和韩，发起二阶段提交。



2.举例
a.选举赵。
b.赵分别向魏、韩发送消息：“明天攻打秦国，方便吗？”
c.赵、魏、韩，分别评估明天能否去攻打秦国，如果能，就预留时间并锁定，不再安排其他军事活动。
d.赵得到全部的回复结果（包括他自己的评估结果），都是YES。
e.赵进入提交执行阶段（又称完成阶段），开始各个节点执行具体操作。
f.



TCC（Try-Confirm-Cancel）




