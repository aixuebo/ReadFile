一、Derived 推测
1.用于来自lookup表选择多个维度作为维度去builder的时候进行优化,此时称为Derived,但是注意事项是lookup最终会加载到内存中进行推测,因此lookup表不宜数据量太大
2.该优化可以减少builder的维度,因为Derived的维度是不参与builder,而是后续query的时候进行在线计算来的
3.fact表中的主键,称之为host column,即通过fact表中主键去推测lookup表中其他数据
4.例子
Fact table	     (joins)	        Lookup Table
column1,column2,,,,,, DimA(FK)		DimX(PK),,DimB, DimC

a.where DimA = DimX
b.因为DimA与DimX总是相同,因此当query中使用DimX字段的都可以自动的转换成使用DimA字段查询,不需要额外的价值损耗(COST)
因此query中kylin将在filter和groupby中将PK的字段都替换成FK,即使用fact表中的host column字段
c.比如你想要 DimA(FK), DimX(PK), DimB, DimC这种组合在cube中,因此我们只需要选择DimA,DimB,DimC 即可,因此可以少了一个维度
d.假设数据最终是以下内容
dimA	dimB	dimC
1	a	?
2	b	?
3	c	?
4	a	?
因为lookup表PK已知了,DimB和DimC就确定了,因此dimB和dimC是可以通过DimA被推测出来的。
假设我们cube中需要关联DimA和DimB两个维度,因此此时我们可以仅让DimA是维度,DimB是derived即可,因此DimB就不会出现在builder的过程中了,因此增加了builder的效率

即原始组合
ABC,
AB,
AC,
BC,
A,
B,
C
优化后组合
AC,
A,
C

5.sql以及查询过程
select count(*) from fact_table inner join looup1 group by looup1.dimB
因此首先要修改查询计划,查询dimB对应的host column,即DimA
结果是
DimA	count(*)
1	1
2	1
3	1
4	1
然后使用DimA对应的DimB的值替换,此时替换是因为lookup表已经加载到内存中了
DimB	count(*)
a	1
b	1
c	1
a	1
然后执行聚合引擎,得到结果
DimB	count(*)
a	2
b	1
c	1
以上的查询是有运行时代价的.即at the cost of extra runtime aggregation


二、继承关系
比如年月日三个关系,一定是先出现年 后出现月 再出现日,不允许出现月 日 或者仅仅出现日的情况,因此将2^3次方转换成3+1次,1表示三者都没有的情况

三、必须要存在的列mandatory_dims
列是必须存在的

四、joint_dims组合
N个维度必须同时存在或者同时不存在,因此2^N 优化成2次

五、AggregationGroup 聚合组
将N个维度分成若干个组,每个组之间的字段是不会一起用于查询的


六、未来优化的方案
1.还有black list，比如某几个高基维一定不会两两组合 各种优化不断加进来 期待下
2.预告下，后面Kylin会加个优化的新方案，设置cuboid维度组合上限，比如有50个维度，设置最多维度组合同时group by 的场景不超过10个、一下子会去掉很多计算场景 会优化很多
3.因为uuid是字符串,因此使用字典树时候也会占用很大字节,可以考虑使用int作为唯一标识,这样可以使用bitset方式,减少内存
即比如我们的是userid,可以考虑为userid设置唯一自增长主键,然后使用该主键进行表示唯一userid

