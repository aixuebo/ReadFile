一、wholeTextFiles
val rdd1 = sc.wholeTextFiles("/log/statistics/etl/test_invite",5) //用5个分区读取一个输入路径,输出是key-value,key是文件路径,value是文件全部内容,包括回车换行等信息
rdd1.foreach(println)
输出

其中 ip:port是fs.defaultFS配置的内容
(hdfs://ip:port/log/statistics/etl/test_invite/temp_invite_2.txt,1,2
1,3
2,4
3,5
4,6
7,8
7,9
2,10
)
(hdfs://ip:port/log/statistics/etl/test_invite/xxx.txt,inde
adsada
index
wowow
)

二、RDD各种转换

val inputPath = "/log/r/test/xxxx.csv"
val outputPath = "/log/r/test_output2/xxxx.csv"

val dataRDD = sc.textFile(inputPath)
1.将一行数据转换成元组(userid,line)
2.对元组进行group by userid分组
3.对分组的内容获取
4.存储最终分组内容
pipeRDD.saveAsTextFile(outputPath)
val pipeRDD = dataRDD.map{line =>
 (line.split(",")(0),line)
}.groupByKey().flatMap(_._2)
pipeRDD.saveAsTextFile(outputPath)

拿到前20条数据,获取Array数组,然后打印数据内容
val xxx = pipeRDD.take(20)
for(x <- xxx) println(x)

pipeRDD.collect() 拿回全部数据

三、参数使用(x:String) => myfun(x)形式定义
  def myfun(birthday: String) : String = {
      var rt = "未知"
      if (birthday.length == 8) {
        val md = toInt(birthday.substring(4))
        if (md >= 120 & md <= 219)
          rt = "水瓶座"
        else if (md >= 220 & md <= 320)
          rt = "双鱼座"
        else if (md >= 321 & md <= 420)
          rt = "白羊座"
        else if (md >= 421 & md <= 521)
          rt = "金牛座"
        else if (md >= 522 & md <= 621)
          rt = "双子座"
        else if (md >= 622 & md <= 722)
          rt = "巨蟹座"
        else if (md >= 723 & md <= 823)
          rt = "狮子座"
        else if (md >= 824 & md <= 923)
          rt = "处女座"
        else if (md >= 924 & md <= 1023)
          rt = "天秤座"
        else if (md >= 1024 & md <= 1122)
          rt = "天蝎座"
        else if (md >= 1123 & md <= 1222)
          rt = "射手座"
        else if ((md >= 1223 & md <= 1231) | (md >= 101 & md <= 119))
          rt = "摩蝎座"
        else
          rt = "未知"
      }
      rt
    }
sqlContext.udf.register("constellation",  (x:String) => myfun(x))

