
一、背景
用于序列化、反序列化传输数据。可以将对象序列化成字节,存储在中间媒介里。


二、知识点
1.extends Serializable  或者 with java.io.Serializable
2.设置@SerialVersionUID,一个固定的值,用于版本兼容。不写会随机生成一个。
3.某一些变量可以不用序列化
对象持有非常大的member，序列化和反序列化的开销很大，而我们并不需要序列化它
业务逻辑中，大量序列化和反序列化的开销成为瓶颈，需要优化
对象member不可/难以序列化，如网络连接，数据流等，或者是引用第三方库中不可序列化的对象

不序列化方法:
1.@transient表示该成员不需要被序列化。
2.@transient 
lazy val password = "this password"

@trainsient可以让不需要序列化的对象,避免序列化。
lazy 可以第一次被调用时正确地初始化,避免空指针异常。

三、应用
import java.io.{FileInputStream, FileOutputStream, ObjectInputStream, ObjectOutputStream}
import org.apache.spark.{SparkConf}

//序列化对象
@SerialVersionUID(99L)
class TestSpark(val name: String) extends Serializable {

  @transient
  val conf = new SparkConf().setAppName("SparkTest").setMaster("local")

  @transient
  val password = "this password"

  //序列化到一个文件中
  def serialize[T](o: T) {
    val oos = new ObjectOutputStream(new FileOutputStream(Test1.path))
    oos.writeObject(o)
    oos.close()
  }
}

object Test1 {
  val path = "/Serializable.txt"

  //反序列化
  def deserialize[T](bytes: Array[Byte]): T = {
    val ois = new ObjectInputStream(new FileInputStream((path)))
    ois.readObject.asInstanceOf[T]
  }

  //具体序列化某一个对象
  def serialize(): Unit ={
    val vo = new TestSpark("name")
    vo.serialize(vo)//序列化到文件中
  }

//反序列化
  def deSerialize(): Unit ={
   val vo = deserialize[TestSpark](null) //读取序列化后的文件
    println(vo.name)
    println(vo.password)
    println(vo) 
    println(vo.conf)
  }

  def main(args: Array[String]): Unit = {
    Test1.serialize() //序列化
    Test1.deSerialize() //反序列化
  }

}

四、说明
1.SparkConf本身也实现了Serializable,如果对象没有实现Serializable,则会抛异常,说未实现序列化接口。

2.正常序列化--全部属性都会被序列化
  val conf = new SparkConf().setAppName("SparkTest").setMaster("local")
  val password = "this password"
  
  def deSerialize(): Unit ={
   val vo = deserialize[TestSpark](null) //读取序列化后的文件
    println(vo.name) //name
    println(vo.password) //this password
    println(vo) //TestSpark@12c8a2c0
    println(vo.conf) //org.apache.spark.SparkConf@60d8c9b7
  }

2.@transient某些属性不参与序列化

  @transient
  val conf = new SparkConf().setAppName("SparkTest").setMaster("local")

  @transient
  val password = "this password"
  
  def deSerialize(): Unit ={
   val vo = deserialize[TestSpark](null) //读取序列化后的文件
    println(vo.name) //name
    println(vo.password) //null --- 因为没有序列化该属性,因此得到的值是null
    println(vo) //TestSpark@12c8a2c0
    println(vo.conf) //null --- 因为没有序列化该属性,因此得到的值是null
  }
  
3.@transient+lazy,不序列化 并且懒加载
  @transient
  lazy val conf = new SparkConf().setAppName("SparkTest").setMaster("local")

  @transient
  lazy val password = "this password"

  def deSerialize(): Unit ={
   val vo = deserialize[TestSpark](null) //读取序列化后的文件
    println(vo.name) //name
    println(vo.password) //this password --- 因为没有序列化该属性,但当我们使用password的时候,被懒加载了,此时加载成具体的值
    println(vo) //TestSpark@12c8a2c0
    println(vo.conf) //org.apache.spark.SparkConf@2928854b --- 因为没有序列化该属性,但当我们使用conf的时候,被懒加载了,此时加载成具体的对象
  }