一、初始化一个一维数组，里面有3个元素，默认值都是50 
val numBins = Array.fill[Int](3)(50) 
numBins.foreach(println(_))

val featureValueSets = Array.fill[OpenHashSet[Double]](50)(new OpenHashSet[Double]()) 创建50个size的数组,数组每一个元素是OpenHashSet[Double]对象
    
二、ArrayBuffer 创建动态的数组
import scala.collection.mutable.ArrayBuffer
val b = ArrayBuffer[Int]()
b += (1, 2, 3,6,8,5,10)
var durations = b.toArray
java.util.Arrays.sort(durations)
val medianDuration = durations(scala.math.min((0.5 * 3).round.toInt, durations.size - 1)) //获取中位数 durations[2] = 3

三、Array创建
val weights = Array[Double](0.3,0.2,0.4)
val sum = weights.sum
val normalizedCumWeights = weights.map(_ / sum).scanLeft(0.0d)(_ + _)

val numbers = Array(1, 2, 3, 4) //声明一个数组对象
val first = weights(0) // 读取第一个元素
weights(2) = 100.0 // 替换第3个元素为100
val biggerNumbers = weights.map(_ * 2) // 所有元素乘2


注意；
Array[Int](0, 1) 这种写法是没有问题的
Array[Int]{0, 1} 这种写法是报错的,即只能是小括号方式


四、buffer的数组
val splitsBuilder = ArrayBuilder.make[Double]
splitsBuilder += 1.9

五、转换成java数组
import java.util.Arrays
val data = Arrays.asList(Row(Vectors.dense(-2.0, 2.3, 0.0)))