 一、case里面接入if条件判断
  def matchTest(x:Any):Any = x match{
    case 1=>"one"
    case "two"=>2
    case y:String=>"scala.String"
    case y:Int if(y%5==0) =>"5 times Int"
    case _=>"many"
  }

二、kafka的每一个数据都是json字符串
以下是sparkStreaming程序
directKakfaStream.flatMap({ kv => kv._2
      val jsonvo = JsonUtil.strToJson(kv._2)//将json字符串转换成json对象
      jsonvo match {
        case vo: JSONObject => {
            vo.getJSONObject ("head").put ("channel", "aaa")//说明转换成功,因此对其追加一个渠道属性
            Some (vo)//返回转换后的json对象
        }
        case _=> None //说明转换失败,因此返回None
      }
    }).foreachRDD( rdd =>
        rdd.collect().foreach(println(_)) //打印每一个JSONObject对象内容
    )
注意事项
1.上面的过程是使用flatMap,因此在foreachRDD打印的时候,将None的数据删除掉了,是看不到的
2.如果上面的flatMap改成map,是会将None也会打印在foreachRDD里面的,这个不是我们想要的
3.但是flatMap要求的数据是Traversable迭代器的对象,但是我们返回的是一个None或者Some对象,这有什么关系么?
原因是Option这个对象持有一个隐式转换
object Option {
  import scala.language.implicitConversions

  /** An implicit conversion that converts an option to an iterable value
   */
  implicit def option2Iterable[A](xo: Option[A]): Iterable[A] = xo.toList

  //而要么是一个空集合,要么是一个元素的集合
  def toList: List[A] = if (isEmpty) List() else new ::(this.get, Nil)
