一、merge只能使用一个字段进行合并,如何使用多个字段
解决方案,在mapper阶段key用多个字段的值代替即可,因此修改map代码
在使用sqoop merge时，多个字段用逗号分隔，把每个字段对应的值取出来拼接成新的key。

    protected void processRecord(SqoopRecord r, Context c)
            throws IOException, InterruptedException {
        MergeRecord mr = new MergeRecord(r, isNew);
        Map<String, Object> fieldMap = r.getFieldMap();
        if (null == fieldMap) {
            throw new IOException("No field map in record " + r);
        }
        Object keyObj = null;
        if (keyColName.contains(",")) {
            String connectStr = new String(new byte[]{1});
            StringBuilder keyFieldsSb = new StringBuilder();
            for (String str : keyColName.split(",")) {
                keyFieldsSb.append(connectStr).append(fieldMap.get(str).toString());
            }
            keyObj = keyFieldsSb;
        } else {
            keyObj = fieldMap.get(keyColName);
        }

        if (null == keyObj) {
            throw new IOException("Cannot join values on null key. "
                    + "Did you specify a key column that exists?");
        } else {
            c.write(new Text(keyObj.toString()), mr);
        }
    }

　　上面需要注意的一点是，我的拼接符使用了一个byte的String，这样可以避免以下这种情况。 
　　假设使用“+”当拼接符，如果存在两条记录：
Field a	Field b
a+	b
a	+b
　　使用字段ａ,b进行merge时，上面两条不一样的记录最终会被程序认为是相同的，由此会产生新的数据不准确问题

二、sqoop import导入数据的时候,如果数据有回车换行就会有问题,因此数据应该过滤回车换行符
修改org.apache.sqoop.lib.JdbcWritableBridge代码
  public static String readString(int colNum, ResultSet r) throws SQLException {
    return convertString(r.getString(colNum));
  }方法中取消回车换行,调用toTrim即可

  public static String convertString(String value){
	  return value == null ? null : value.trim();
  }

上面的方法是org.apache.sqoop.orm.ClassWriter自动生成代码的时候调用的,可以在这个类里面找到代码逻辑

因为上面的代码虽然过滤了mysql的空格,但是有时候mysql的字段value里面包含\n回车,或者\t等等其他违法的内容,因此有必要将其替换成其他的字符,因此修改下面代码,将其替换成|
    public static String convertString(String value){
  	  return value == null ? null : value.trim().replaceAll("\r\n", "").replaceAll("\n", "");
    }

三、mysql的包版本过低
异常sqoop java.sql.SQLException: Streaming result set com.mysql.jdbc.RowDataDynamicis still active
mysql的mysql-connector-java-5.1.17.jar版本太低了,导致以下的两个方法在Date的数据库类型的时候,会抛异常。

org.apache.sqoop.manager.SqlManager
          int precision = metadata.getPrecision(i);//属性的整数位
          int scale = metadata.getScale(i);//属性的小数点
解决方法是:更换成mysql-connector-java-5.1.38-bin.jar包即可

四、对sqoop中-column字段不支持关键字导入进行处理
因为今天对一个表,字段是desc,属于mysql的关键字,因此有影响,在import的时候追加了 -column id,\`desc\`即可,但是却没办法校验通过,因此修改代码
修改代码org.apache.sqoop.util.SqlTypeMap
  public V get(Object col) {
	if(col instanceof String){
		String col_temp = (String)col;
		if(col_temp.startsWith("`") && col_temp.endsWith("`") ){
			col = col_temp.substring(1,col_temp.length()-1);
		}
	}
表示将`desc` 转换成desc

注意:
1.创建table的分隔符一定是逗号,
2.必须是外部表,因为如果直接接入hive的话,关键字在创建hive表结构的时候也会抛异常,因此只能使用外部表
demo

sqoop --options-file /path_hdfs.txt --delete-target-dir -m 1 --target-dir path --table awd_award --columns id,act_id,name,\`desc\`,stock,category,award_tag,image_url,type,amount,create_time,update_time,version --verbose

CREATE TABLE IF NOT EXISTS databases.awd_award (
id INT,
act_id  STRING,
name  STRING,
description  STRING,
stock  INT,
category STRING,
award_tag  STRING,
image_url  STRING,
type  INT,
amount  DOUBLE,
create_time STRING,
update_time STRING,
version INT)
ROW FORMAT DELIMITED FIELDS TERMINATED BY ',';
