一、print
1.print 'hello world'
2.可以打印变量
mystring='hello world'
>>> print mystring
hello world
3.mystring;
  'hello world'
4.下划线(_)在解释器中有特别的含义，表示最后一个表达式的值
>>> _
'hello world'
5.print "%s is number %d! %f" % ("Python", 1,1.3)
Python is number 1! 1.300000
6.符号>>表示重定向输出,输出到标准错误输出中,以及文件中
import sys
print >>sys.stderr,'xxxxxx'

logfile = open('/server/app/sqoop/python.txt','a')
print >>logfile, 'fatal error:formanager'
logfile.close();

7.从程序输入内容
a.
user = raw_input('Enter login name:') ###user变量最终是用户输入的内容
Enter login name:myself name
>>> print user
myself name
b.
user = raw_input('Enter login name:') ##输入一个整数
Enter login name:34
>>> int(user)*2  ###int函数可以将字符串转换成int
68

8.help(raw_input) ###帮助方法

二、注释
1.###表示注释
2.文档字符串特别注释
在模块、类、函数的开始位置添加一个字符串,与普通字符串不同,可以在运行时候访问,也可以自动生成文档
def foo():
    """ This is function foo"""
    return True

三、运算符号
+ - * /
// 双斜杠用作浮点除法（对结果进行四舍五入）
% 取余
** 乘方运算

例如
print 3**4 等于3的4次方,即81

四、逻辑运算符号
1.>= <= > < == != <>
2.and or not

demo
 3 < 4 < 5  是python自带方式,其他语法是不支持的,相当于 3 < 4 and 4 < 5

五、变量
1.Python变量名是大小写敏感的， 也就是说变量 "cAsE" 与 "CaSe" 是两个不同的变量
2.Python 是动态类型语言， 也就是说不需要预先声明变量的类型
变量的类型和值在赋值那一刻被初始化。变量赋值通过等号来执行
demo
1.miles = 1000.0 当赋值的时候才判断miles是double类型的,因此不需要前缀写入变量类型
2.n = n * 10
等价于 n *= 10
3.python不支持n++ 和--n操作

六、数字类型
1.int long bool float
complex(复数) 例如 6.23+1.5j
Decimal 类型,但是不是内置类型,因此要导入decimal模块

demo
1.bool true表示1 false表示0
2.
1.1
1.1000000000000001
import decimal
>>> print decimal.Decimal('1.1')
1.1

七、字符串
1. ''
2.""
3.三引号（三个连续的单引号或者双引号）可以用来包含特殊字符
4.获取子字符串
使用索引运算符( [ ] )和切片运算符( [ : ] )
5.加号( + )用于字符串连接运算，星号( * )则用于字符串重复

demo
>>> pystr = 'Python'
>>> iscool = 'is cool!'
>>> pystr[0]
'P'
pystr[2:5]
'tho'
iscool[:2]
'is'
iscool[-1]
'!'
pystr + iscool
'Pythonis cool!'
pystr * 2
'PythonPython'

pystr = '''python
... is cool'''
>>> pystr
'python\nis cool'
>>> print pystr
python
is cool
>>>

八、列表和元组
可以将列表和元组当成普通的“数组”，它能保存任意数量任意类型的 Python 对象。和数组一样，通过从 0 开始的数字索引访问元素，但是列表和元组可以存储不同类型的对象。

列表和元组有几处重要的区别。
列表元素用中括号( [ ])包裹，元素的个数及元素的值可以改变。
元组元素用小括号(( ))包裹，不可以更改（尽管他们的内容可以）。
元组可以看成是只读的列表
通过切片运算( [ ] 和 [ : ] )可以得到子集，这一点与字符串的使用方法一样。

>>> aList = [1, 2, 3, 4]
>>> aList
[1, 2, 3, 4]
>>> aList[0]
1
>>> aList[2:]
[3, 4]
>>> aList[:3]
[1, 2, 3]
>>> aList[1] = 5  ##改变第1个位置元素内容
>>> aList
[1, 5, 3, 4]
元组也可以进行切片运算，得到的结果也是元组（不能被修改）：
>>> aTuple = ('robots', 77, 93, 'try')
>>> aTuple
('robots', 77, 93, 'try')
>>> aTuple[:3]
('robots', 77, 93)
>>> aTuple[1] = 5  ##更改元组则报错
Traceback (innermost last):
File "<stdin>", line 1, in ?
TypeError: object doesn't support item assignment

九、字典--就是Map
>>> aDict = {'host': 'earth'} # create dict
>>> aDict['port'] = 80 # add to dict
>>> aDict
{'host': 'earth', 'port': 80}
>>> aDict.keys()
['host', 'port']
>>> aDict['host']
'earth'
for key in aDict: print key, aDict[key]
...
host earth
port 80

十、if语法
1.标准 if 条件语句的语法如下：
if expression:
 代码体
elif expression2:
 代码体
else
 代码体

注意
a.表达式true或者非0,则都会执行代码体,
b.Python与其它语言不同， 条件条达式并不需要用括号括起来。
  if x < .0:
  print '”x” must be atleast 0!'

十一、while 循环
1.标准形式
while expression:
 代码体

注意
a.表达式true或者非0,则都会执行代码体,
b.条件条达式并不需要用括号括起来。

>>> counter = 0
>>> while counter < 3:
... print 'loop #%d' % (counter)
... counter += 1
loop #0
loop #1
loop #2

十二、for 循环和 range()内建函数
1.Python 中的 for 循环与传统的 for 循环（计数器循环）不太一样， 它更象 shell 脚本里的 foreach 迭代。Python 中的 for 接受可迭代对象（例如序列或迭代器）作为其参数，每次迭代其中一个元素。
>>> for item in ['e-mail', 'net-surfing', 'homework',
'chat']:
... print item
...
e-mail
net-surfing
homework
chat

上面例子的输出如果能在同一行就会美观许多。print 语句默认会给每一行添加一个换行
符。只要在 print 语句的最后添加一个逗号(,)， 就可以改变它这种行为。
print 'I like to use the Internet for:'
for item in ['e-mail', 'net-surfing', 'homework', 'chat']:

print item,
print
上面的代码还添加了一个额外的没有任何参数的 print 语句， 它用来输出一个换行符。否则， 提示信息就会立刻出现在我们的输出之后。 下面是以上代码的输出：
e-mail net-surfing homework chat


2.让 Python for 循环更象传统循环（换言之， 计数循环）的示例
>>> for eachNum in [0, 1, 2]:
... print eachNum
...
0
1
2
在这个循环中， eachNum 包含的整数值可以用于显示， 也可以用于计算。

因为我们要使用的数值范围可能会经常变化，Python 提供了一个 range()内建函数来生成这种列表。它正好能满足我们的需要， 接受一个数值范围， 生成一个列表
>>> for eachNum in range(3):
... print eachNum
...
0
1
2

3.对字符串来说， 很容易迭代每一个字符。
>>> foo = 'abc'
>>> for c in foo:
... print c
...
a
b
c
range()函数经常和 len()函数一起用于字符串索引。 在这里我们要显示每一个元素及其
索引值：
>>> foo = 'abc'
>>> for i in range(len(foo)):
... print foo[i], '(%d)' % i
...
a (0)
b (1)
c (2)
不过， 这些循环有一个约束， 你要么循环索引， 要么循环元素。这导致了 enumerate() 函数的推出（Python2.3 新增）。 它同时做到了这两点：
>>> for i, ch in enumerate(foo):
... print ch, '(%d)' % i
...
a (0)
b (1)
c (2)

十三、列表解析
这是一个让人欣喜的术语， 表示你可以在一行中使用一个 for 循环将所有值放到一个列表当中：

>>> squared = [x ** 2 for x in range(4)]  ### 0-3循环,每一次获取该元素的平方
[0, 1, 4, 9]
>>> for i in squared:
... print i
0
1
4
9

列表解析甚至能做更复杂的事情， 比如挑选出符合要求的值放入列表：
>>> sqdEvens = [x ** 2 for x in range(8) if not x % 2]  ##### 0-7循环,每一次获取该元素的平方,只要能被2整出的
>>>
>>> for i in sqdEvens:
... print i
0
4
16
36

十四、文件和内建函数 open() 、file()
1.打开文件
handle = open(file_name, access_mode = 'r')
file_name 变量包含我们希望打开的文件的字符串名字， access_mode 中 'r' 表示读取，'w' 表示写入， 'a' 表示添加。
其它可能用到的标声还有 '+' 表示读写， 'b'表示二进制访问.

当一个文件对象返回之后， 我们就可以访问它的一些方法， 比如 readlines() 和 close().
文件对象的方法属性也必须通过句点属性标识法访问（参阅下面的核心笔记）



属性是与数据有关的项目， 属性可以是简单的数据值， 也可以是可执行对象， 比如函数
和方法。哪些对象拥有属性呢？ 很多。 类， 模块， 文件还有复数等等对象都拥有属性。
我如何访问对象属性？ 使用句点属性标识法。 也就是说在对象名和属性名之间加一个句
点： object.attribute
下面有一些代码， 提示用户输入文件名， 然后打开一个文件， 并显示它的内容到屏幕上：
filename = raw_input('Enter file name: ')
fobj = open(filename, 'r')
for eachLine in fobj:
print eachLine, ###每次循环一行内容打印
fobj.close()

我们的代码没有用循环一次取一行显示， 而是做了点改变。我们一次读入文件的所有行，
然后关闭文件， 再迭代每一行输出。这样写代码的好处是能够快速完整的访问文件。内容输出
和文件访问不必交替进行。这样代码更清晰， 而且将不相关的任务区分开来。需要注意的一点
是文件的大小。 上面的代码适用于文件大小适中的文件。对于很大的文件来说， 上面的代码
会占用太多的内存， 这时你最好一次读一行。（下一节有一个好例子）
我们的代码中另一个有趣的语句是我们又一次在 print 语句中使用逗号来抑制自动生成
的换行符号。 为什么要这样做？因为文件中的每行文本已经自带了换行字符， 如果我们不抑
制 print 语句产生的换行符号， 文本在显示时就会有额外的空行产生。


file()内建函数是最近才添加到 Python 当中的。它的功能等同于 open()， 不过 file()
这个名字可以更确切的表明它是一个工厂函数。（生成文件对象）类似 int()生成整数对象，
dict()生成字典对象。在第 9 章， 我们详细介绍文件对象， 及它们的内建方法属性， 以及如
何访问本地文件系统。 请参考第 9 章以了解详细信息。

十五、错误和异常
try:
filename = raw_input('Enter file name: ')
fobj = open(filename, 'r')
for eachLine in fobj:
print eachLine, fobj.close()
except IOError, e:
print 'file open error:', e
程序员也可以通过使用 raise 语句故意引发一个异常

十六、函数
1.的函数使用小括号调用
2.如果函数中没有 return 语句， 就会自动返回 None 对象
3.Python 是通过引用调用的。 这意味着函数内对参数的改变会影响到原始对象。不过事实上只有可变对象会受此影响， 对不可变对象来说， 它的行为类似按值调用
4.如何定义函数
def function_name([arguments]):
"optional documentation string"
function_suite
定义一个函数的语法由 def 关键字及紧随其后的函数名再加上该函数需要的几个参数组成
函数参数（比较上面例子中的 arguments)是可选的， 这个语句由一个冒号(:)结束（与 if 和 while语句的结束方式一样）， 之后是代表函数体的代码组，

demo
def addMe2Me(x):
 'apply + operation to argument'
 return (x + x)

addMe2Me([-1, 'abc'])
[-1, 'abc', -1, 'abc']

5.默认参数,可以为参数设置默认值
 def foo(debug=True):

十七、类
1.如何定义类
class ClassName(base_class[es]): ###定义class,其中base_class表示父类
 "optional documentation string" ###可选的文档字符串
 static_member_declarations ###静态成员
 method_declarations ###定义方法

demo
class FooClass(object):
"""my very first class: FooClass"""
version = 0.1 # class (data) attribute

###定义构造函数
def __init__(self, nm='John Doe'):
"""constructor"""
self.name = nm # class instance (data) attribute
print 'Created a class instance for', nm


def showname(self):
"""display instance attribute and class name"""
print 'Your name is', self.name
print 'My name is', self.__class__.__name__


def showver(self):
"""display class(static) attribute"""
print self.version # references FooClass.version


def addMe2Me(self, x): # does not use 'self'
"""apply + operation to argument"""
return x + x

在上面这个类中， 我们定义了一个静态变量 version, 它将被所有实例及四个方法共享，
__init__()， showname(), showver(), 及熟悉的 addMe2Me().

这些 show*()方法并没有做什么有用的事情， 仅仅输出对应的信息。
__init__() 方法有一个特殊名字， 所有名字开始和结束都有两个下划线的方法都是特殊方法。


当一个类实例被创建时， __init__() 方法会自动执行， 在类实例创建完毕后执行， 类似构建函数。__init__() 可以被当成构建函数，
不过不象其它语言中的构建函数， 它并不创建实例,它仅仅是你的对象创建后执行的第一个方法。它的目的是执行一些该对象的必要的初始化工作。
通过创建自己的 __init__() 方法， 从而能够修饰刚刚创建的对象。在这个例子里， 我们初始化了一个名为 name的类实例属性（或者说成员）。
什么是 self ? 它是类实例自身的引用。其他语言通常使用一个名为 this 的标识符。

