一、FileInputStream fin
limit = fin.read(buffer, 0, len);
从文件流中最多读取len个字节,存储到buffer中,从buffer的0位置开始存储数据,最终读取了多少个字节就是limit

二、FileOutputStream os 
os.write(buf, off, len) 将buffer缓冲区内从off开始,写len个字节,写入到输出流中

三、FileChannel
RandomAccessFile aFile = new RandomAccessFile("data/nio-data.txt", "rw");
FileChannel inChannel = aFile.getChannel();
1.ByteBuffer buf = ByteBuffer.allocate(48);
int bytesRead = inChannel.read(buf); 从inChannel流中读取内容,存储到buf中,最多存储48个字节,返回具体读取了多少个字节
2.int bytesWritten = inChannel.write(buf) 将buf的内容写入到inChannel输出流中,返回具体写入了多少个字节


四、ByteBuffer
1.ByteBuffer buffer = ByteBuffer.allocate(1024); 创建ByteBuffer对象
2.byte array[] = new byte[1024];
  ByteBuffer buffer = ByteBuffer.wrap(array);
  本例使用了 wrap() 方法将一个数组包装为缓冲区。一旦完成包装，底层数据就可以通过缓冲区或者直接访问。
3. buffer.get(bytes, off, realLen)//从buffer中读取数据,len个,存储到bytes数组中,从off位置开始存储
4. buffer.put(bytes, off, size) //向buffer中添加字节内容,添加的内容是bytes数组中从off位置开始写,写size个到buffer中
5. buffer.putInt(size)//表示向buffer中写入一个int,值是size
6. buffer.putInt(index, value)
   表示在buffer中添加一个int,在buffer的第index个位置添加一个int,即替换
7.buffer.rewind()//将buffer的position设置到0的位置

8.

