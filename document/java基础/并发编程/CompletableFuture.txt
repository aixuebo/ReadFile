异步编程:所谓异步其实就是实现一个无需等待被调用函数的返回值而让操作继续运行的方法
一、无返回值的任务
runAsync方法可以在后台执行异步计算，但是此时并没有返回值。持有一个Runnable对象。

CompletableFuture noReturn = CompletableFuture.runAsync(()->{
    //执行逻辑,无返回值
});

二、无参数,有返回值的方法的任务
CompletableFuture<String> hasReturn = CompletableFuture.supplyAsync(new Supplier<String>() {
    @Override
    public String get() {
        return "hasReturn";
    }
});

使用lambda表达式使上面的逻辑更加清晰
CompletableFuture<String> hasReturnLambda = CompletableFuture.supplyAsync(TestFuture::get);
private static String get() {
    return "hasReturnLambda";
}

三、按顺序执行异步任务
如果有一个异步任务的完成需要依赖前一个异步任务的完成，那么该如何写呢？
是调用get()方法获得返回值以后然后再执行吗？这样写有些麻烦，
CompletableFuture 为我们提供了方法来完成我们想要顺序执行一些异步任务的需求。

1.thenApply 上一步的输出，是下一步的输入，函数的结果又是下一个函数的输入。以此类推。相当于map方法。
2.thenAccept 上一步的输出，是下一步的输入，但函数的结果是void，即无输出的。
3.thenRun 不接受上一步的结果、也不输出数据。即用于收尾操作。

所以一般来说thenAccept 、thenRun 这两个方法在调用链的最末端使用。接下来我们用真实的例子感受一下。


//thenApply  可获取到前一个任务的返回值,也有返回值
CompletableFuture<String> seqFutureOne = CompletableFuture.supplyAsync(()-> "seqFutureOne");

//先执行第一个任务，第一个任务的结果作为name参数传入到第二个任务。
CompletableFuture<String> seqFutureTwo = seqFutureOne.thenApply(name -> name + " seqFutureTwo");
System.out.println(seqFutureTwo.get()); //第二步结果是有输出的。

//thenAccept  可获取到前一个任务的返回值,但是无返回值
CompletableFuture<Void> thenAccept = seqFutureOne.thenAccept(name -> System.out.println(name + "thenAccept"));//有输入,即name是上一步的结果
System.out.println("-------------");
System.out.println(thenAccept.get());//这步是没有输出的

//thenRun 获取不到前一个任务的返回值,也无返回值
System.out.println("-------------");
CompletableFuture<Void> thenRun = seqFutureOne.thenRun(() -> {//无输入,即上一步的结果不传到函数里
    System.out.println("thenRun");
});
System.out.println(thenRun.get());//这步是没有输出的

输出:
seqFutureOne seqFutureTwo
seqFutureOnethenAccept
-------------
null
-------------
thenRun
null



四、组合CompletableFuture,将两个CompletableFuture组合到一起有两个方法
1.thenCompose()：当第一个任务完成时才会执行第二个操作
2.thenCombine()：两个异步任务全部完成时才会执行某些操作

3.thenCompose() 用法，我们定义两个异步任务，假设第二个定时任务需要用到第一个定时任务的返回值。
public static CompletableFuture<String> getTastOne(){
    return CompletableFuture.supplyAsync(()-> "topOne");
}

public static CompletableFuture<String> getTastTwo(String s){
    return CompletableFuture.supplyAsync(()-> s + "  topTwo");
}

我们利用thenCompose()方法进行编写
CompletableFuture<String> thenComposeComplet = getTastOne().thenCompose(s -> getTastTwo(s));
System.out.println(thenComposeComplet.get());
输出就是
topOne  topTwo


如果还记得前面的thenApply()方法的话，应该会想这个利用thenApply()方法也是能够实现类似的功能的。

//thenApply
CompletableFuture<CompletableFuture<String>> thenApply = getTastOne().thenApply(s -> getTastTwo(s));
System.out.println(thenApply.get().get());
但是我们发现返回值是嵌套返回的一个类型，而想要获得最终的返回值需要调用两次get()


4.thenCombine() 用法
例如我们此时需要计算两个异步方法返回值的和。求和这个操作是必须是两个异步方法得出来值的情况下才能进行计算，因此我们可以用thenCombine()方法进行计算。

CompletableFuture<Integer> thenComposeOne = CompletableFuture.supplyAsync(() -> 192);
CompletableFuture<Integer> thenComposeTwo = CompletableFuture.supplyAsync(() -> 196);
CompletableFuture<Integer> thenComposeCount = thenComposeOne.thenCombine(thenComposeTwo, (s, y) -> s + y);
System.out.println(thenComposeCount.get());
此时thenComposeOne 和thenComposeTwo 都完成时才会调用传给thenCombine 方法的回调函数。

五、组合多个CompletableFuture
在上面我们用thenCompose()和thenCombine()两个方法将两个CompletableFuture 组装起来，如果我们想要将任意数量的CompletableFuture 组合起来呢?可以使用下面两个方法进行组合。

allOf()：等待所有CompletableFuture 完后以后才会运行回调函数
anyOf()：只要其中一个CompletableFuture 完成，那么就会执行回调函数。注意此时其他的任务也就不执行了。
接下来演示一下两个方法的用法

1.allOf()
CompletableFuture<Integer> one = CompletableFuture.supplyAsync(() -> 1);
CompletableFuture<Integer> two = CompletableFuture.supplyAsync(() -> 2);
CompletableFuture<Integer> three = CompletableFuture.supplyAsync(() -> 3);
CompletableFuture<Integer> four = CompletableFuture.supplyAsync(() -> 4);
CompletableFuture<Integer> five = CompletableFuture.supplyAsync(() -> 5);
CompletableFuture<Integer> six = CompletableFuture.supplyAsync(() -> 6);

CompletableFuture<Void> voidCompletableFuture = CompletableFuture.allOf(one, two, three, four, five, six);
voidCompletableFuture.thenApply(v->{
    return Stream.of(one,two,three,four, five, six)
            .map(CompletableFuture::join)
            .collect(Collectors.toList());
}).thenAccept(System.out::println);

CompletableFuture<Void> voidCompletableFuture1 = CompletableFuture.runAsync(() -> {
    try {
        Thread.sleep(1000);
    } catch (Exception e) {

    }
    System.out.println("1");
});

我们定义了6个CompletableFuture 等待所有的CompletableFuture等待所有任务完成以后然后将其值输出。

2.anyOf()的用法

CompletableFuture<Void> voidCompletableFuture1 = CompletableFuture.runAsync(() -> {
	try {
	    Thread.sleep(1000);
	} catch (Exception e) {
	
	}
	System.out.println("voidCompletableFuture1");
});

CompletableFuture<Void> voidCompletableFutur2 = CompletableFuture.runAsync(() -> {
	try {
	    Thread.sleep(2000);
	} catch (Exception e) {
	
	}
	System.out.println("voidCompletableFutur2");
});

CompletableFuture<Void> voidCompletableFuture3 = CompletableFuture.runAsync(() -> {
	try {
	    Thread.sleep(3000);
	} catch (Exception e) {
	
	}
	System.out.println("voidCompletableFuture3");
});

CompletableFuture<Object> objectCompletableFuture = CompletableFuture
    .anyOf(voidCompletableFuture1, voidCompletableFutur2, voidCompletableFuture3);
objectCompletableFuture.get();
这里我们定义了3个CompletableFuture进行一些耗时的任务，此时第一个CompletableFuture会率先完成。打印结果如下。

voidCompletableFuture1


六、当A和B都完成后，提供一个函数，对AB两个值作为参数，进行逻辑处理。
A thenCombineAsync(B,(A,B -> {} ))
例子:
//说明leader节点已经启动，并且知道leader是谁
CompletableFuture<JobMasterId> jobMasterIdFuture;

//连接job的地址，请求某一个jobId(jobMasterId),返回动态代理类
CompletableFuture<JobMasterGateway> jobMasterGatewayFuture = getRpcService().connect(jobManagerAddress, jobMasterId, JobMasterGateway.class);

当前两个参数都获取后，对前两个参数进行merge
CompletableFuture<RegistrationResponse> registrationResponseFuture = jobMasterGatewayFuture.thenCombineAsync(
	jobMasterIdFuture,
	(JobMasterGateway jobMasterGateway, JobMasterId currentJobMasterId) -> {})
			
