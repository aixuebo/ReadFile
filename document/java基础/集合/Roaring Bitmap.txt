一、背景与总结
1.参考信息
数学/统计算法/bitmap
java基础/集合/bitmap
生活与读书/技术/检索技术核心20讲/05-1-倒排索引

2.每一个桶占用2字节，每一个桶对应的Container占用8字节。
3.将有序数组+位图结合，解决判断是否元素存在的需求场景。可以保证高效检索:
如果我们要确认一个元素是否在Roaring Bitmap中存在，通过两次查找就能确认了。
第一步是以高16位在有序数组中二分查找，看对应的桶是否存在。代价 O（log n）
第二步就是将桶中的位图取出，拿着低16位在位图中查找，判断相应位置是否为1。代价 O(1)。


二、原理
假设要将任意int类型数据(4个字节，32位)，存储到bitmap中，因此需要2^32的bit位置,因此需要2^32/8个字节 = 512M。显然任意一个bitmap字段，都要有512M的空间，如果稀松，则会浪费空间。

改进方案
还是int类型,因此依然存储的数据范围是2^32个bit。每一个值都理论上会占用一个不同的bit位置。
那么现实中，虽然总量是int，但不是所有的值都需要被存储到bitmap中。甚至如果连续的数据被存储，应该更可以优化空间。
因此优化方案是，将整个2^32个位置划分空间，划分成2^16份空间。每一个空间里，可以存储2^16个bit，这样总数量是没有变化的，但却可以优化内存。
因为假设存储的数据是100个，因此最多也就占用了100个空间，而不需要占用2^16个空间。内存被节省下来了。

原理实现:
1.将任意int，按照高16位、底16位，拆分成2部分。
2.高16位确定再哪个空间桶里。底16位转换成具体匹配的bit，将其设置为1.
3.实现上:
使用Container容器，存储低16位，具体的bit位，因此每一个Container需要2^16=8k大小。
使用有序数组，存储Container容器的引用，数组中是按照"Container容器引用"进行排序。 --- 使用二分法可以立刻找到高16位对应的Container容器。
没有一下子创建2^16个数组桶，原因就是每一个桶对应的Container是8k,没必要全创建出来空着，浪费，用哪个创建哪个，这样就需要有序数组明确引用位置。

注意:
我们只需要一个2个字节的桶（注：每个桶都是一个short型的整数，因此只有2个字节。如果数组提前分配好了2^16个桶，那就需要128K字节的空间，因此使用可变长数组更节省空间）
即其实每一个桶占用2字节，每一个桶对应的Container占用8字节

优化了哪些:
1.如果数据是连续的，比如为流量数据分配自增长id，因此连续的数据高16位都相同，因此使用相同的桶。即将分散的int点，聚集到固定的若干个桶内，桶内bit位置是密集的。
2.将容器存储数据解耦，因此容器可以有更好的分类。
虽然Container是8k大小，但可以存储格式不同的数据
Array Container 存放稀疏的数据。用于存储少量的数据，比如如果容器内数据<4096个，因此说明低16位的数据虽然有2^16种可能，但真实存储的只有4096个可能。
	而低16位，其实就是2个字节，因此short也是2个字节，完全够存储一个int值。因此相当于怎么用8k直接存储4096个short。--- 2Byte * 4096 = 8K
	因此不需要存储bit，直接存储4096个short即可。
	Container内数据结构 short[] content;存储的元素放在short里面,因为short是2个字节,正好容纳16位。
	内存数据结构就是一个固定的数组,这个 array 是有序的,可以二分查找，方便查找。
Bitmap Container 存放稠密的数据。即数据超过4096个。在8k大小的限制下，只能使用bit存储。
3.基于前面提到的两种 Container，在两个 Container 之间的 Union (bitwise OR)  或者 Intersection (bitwise AND) 操作又会出现下面三种场景：
Bitmap vs Bitmap
Bitmap vs Array
Array vs Array

三、举例
假设现在我们要将 821697800 这个 32 bit 的整数插入，整个算法流程是这样的：
821697800 对应的 16 进制数为 30FA1D08， 其中高 16 位为 30FA， 低16位为 1D08。
拿着30FA，二分法查找到对应的Container。如果不存在，则创建一个Container，并且将Container对应的引用存储到数组里。
在对应Container里面，找到低16 位的数值 1D08，它相当于是 7432，将该位置设置为1即可。

存储该数据后，内存使用为8k的Container+数组的一个值。
