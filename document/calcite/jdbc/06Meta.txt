一、背景与核心
核心就是通过connect对象,该对象有schema信息,从而可以获取所有的数据库相关元数据信息
他就是一个大的vo对象，核心能力还是connnection去完成的。他就是在driver初始化的时候，所有connnection共享该元数据对象，获取数据库的元数据信息。
因此meta对象是一个很薄的一层。

1.元数据信息获取
2.实现类与接口的继承关系
	class CalciteMetaImpl extends MetaImpl 
		class MetaImpl implements Meta
			interface Meta 
3.核心vo实体对象
class MetaCatalog catalog的元数据vo对象,catalog,catalog是schema的父层名称，一般都是空,即一个catalog包含多个schema,每一个schema包含多个table
class MetaSchema schema的元数据vo对象,catalog+schema
	class CalciteMetaSchema extends MetaSchema
		private final CalciteSchema calciteSchema
			包含schema的名字、父schema对象、schema对应的table以及function等信息
class MetaTable 表的元数据vo对象, catalog+schema+table
	class CalciteMetaTable extends MetaTable
		持有private final org.apache.calcite.schema.Table calciteTable;
			RelDataType getRowType(RelDataTypeFactory typeFactory); 返回table的列的元数据信息
		  	Statistic getStatistic(); 表的统计信息
			Schema.TableType getJdbcTableType();表类型,是join表还是视图还是什么
class MetaColumn 列的元数据vo对象 catalog+schema+table+column

class MetaPrimaryKey 描述一个主键的vo对象,catalog+schema+table+column
class MetaTableType 描述表的类型,是table还是物化视图、还是view等
Cursor createCursor(CursorFactory cursorFactory,Iterable<Object> iterable) 如何处理一行数据内容---注意 此时已经查询到结果集了
List<List<Object>> collect(CursorFactory cursorFactory,Iterable<Object> iterable,List<List<Object>> list) 
	将迭代器对象内容,转换成list里,并且返回,list的元素表示一行具体的数据

  //只有table和view两种类型---写死
  Enumerable<MetaTableType> tableTypes() {
    return Linq4j.asEnumerable(ImmutableList.of(new MetaTableType("TABLE"), new MetaTableType("VIEW")));    
  }
  
  //从connection中获取 catalog 信息
  Enumerable<MetaCatalog> catalogs() {
  	return Linq4j.asEnumerable(ImmutableList.of(new MetaCatalog(connection.getCatalog())));
  }

Enumerable<MetaSchema> schemas(String catalog) 从connection中获取全部schema集合
	getConnection().rootSchema.getSubSchemaMap().values()
Enumerable<MetaTable> tables(String catalog) 从connection中获取全部schema集合对应的table集合

Enumerable<MetaTable> tables(final MetaSchema schema_) 从connection中获取参数schema下所有的table集合
a.先获取所有table名。
b.通过schema的能力,将table名称转换成table对象。

Enumerable<MetaTable> tables(final MetaSchema schema,final Predicate1<String> matcher) 基于tables方法基础上+filter过滤即可实现 从schema下table+过滤条件查询table对象
Enumerable<MetaColumn> columns(final MetaTable table_) 某一个table下所有列
Enumerable<MetaColumn> columns(final MetaTable table_) 某一个table下所有列


class Pat 就是一个字符串,但字符串有更特殊的意义，是一个包装器,支持%与_这样的通配符
class MetaResultSet 结果集包含以下信息:
1.属于哪个statement,从而知道属于哪个connect。
2.结果集的迭代器集合
3.结果集的元数据信息，包含查询sql、列集合元数据信息、如何将一行迭代器信息转换成正确的格式提取数据

class CursorFactory 游标循环结果集的工厂对象
class Signature 描述一个结果的元数据信息
sql、描述结果集中字段集合的信息、如何一行一行解析数据值

class ConnectionHandle Connection的唯一id
class StatementHandle connect中创建的statement的唯一id,即第几个创建的statement对象
interface PrepareCallback 讲一个查询结果放入到 statement 中
    //定义了一套模板方法,按照顺序依次执行,可以在statement中产生一个结果集
    Object getMonitor();//如何上锁
    void clear() throws SQLException;//如果resultSet存在,则说明是历史的resultSet,将其销毁
    void assign(Signature signature, Iterable<Object> iterable) //设置数据集合的元数据信息,比如sql、列信息集合、如何一行一行读取数据方式,以及 数据集合本身的迭代器
        throws SQLException;
    void execute() throws SQLException;//真正执行结果集生产


二、Meta 接口
0.构造函数
AvaticaConnection connection 持有一个连接对象,即每一个连接拥有一个独享的Meta对象,获取连接需要的数据库元数据信息。
1.String getSqlKeywords(); 返回逗号分隔的关键词集合
2.String getNumericFunctions();//所有数字处理的函数
  比如:"ABS", "ACOS", "ASIN", "ATAN", "ATAN2", "CEILING", "COS", "COT","DEGREES", "EXP", "FLOOR", "LOG", "LOG10", "MOD", "PI",
  "POWER", "RADIANS", "RAND", "ROUND", "SIGN", "SIN", "SQRT","TAN", "TRUNCATE"
3.String getStringFunctions();//逗号分隔的字符串处理函数
"ASCII", "CHAR", "CONCAT", "DIFFERENCE", "INSERT", "LCASE",
 "LEFT", "LENGTH", "LOCATE", "LTRIM", "REPEAT", "REPLACE",
 "RIGHT", "RTRIM", "SOUNDEX", "SPACE", "SUBSTRING", "UCASE"
4.String getSystemFunctions();//逗号分隔的系统函数
"DATABASE", "IFNULL", "USER"
5.String getTimeDateFunctions();//逗号分隔的时间日期函数
"CURDATE", "CURTIME", "DAYNAME", "DAYOFMONTH", "DAYOFWEEK",
"DAYOFYEAR", "HOUR", "MINUTE", "MONTH", "MONTHNAME", "NOW",
"QUARTER", "SECOND", "TIMESTAMPADD", "TIMESTAMPDIFF", "WEEK", "YEAR"

6.通过connection的schema信息,获取各种数据源的元数据信息
MetaResultSet getCatalogs();所有的catalog信息
MetaResultSet getSchemas() 返回schema集合
MetaResultSet getTables()  返回匹配的table集合
MetaResultSet getColumns() 返回匹配的列集合
MetaResultSet getTableTypes();返回所有的table类型--目前只支持table和view
MetaResultSet getFunctions 返回function集合

7.核心方法
StatementHandle createStatement(ConnectionHandle ch);
Iterable<Object> createIterable(StatementHandle handle, Signature signature,Iterable<Object> iterable);
	getConnection().enumerable(handle, calciteSignature);  核心，完全交给了Connection去计算，针对一个已经解析好的sql元数据对象Signature,产生迭代器集合
Signature prepare(StatementHandle h, String sql, int maxRowCount);
	return calciteConnection.parseQuery(sql, statement.createPrepareContext(),maxRowCount); 核心，解析sql元数据信息,完全交给了Connection去计算
MetaResultSet prepareAndExecute(StatementHandle h, String sql,int maxRowCount, PrepareCallback callback);解析一个sql,并且执行该sql
      
