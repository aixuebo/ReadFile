系统开发通道 > 领域驱动设计基础

防腐层，相当于fact层，与外界划分开
上下文是有别的团队已经提供了该功能，不需要我们开发。
共建:一个团队主R，另外一个团队提需求；同一个项目一起共建。
人群筛选域。

战略设计是否ok，做业务场景走查，验证战略设计可以支持所有的场景。+ 业务的预判(人群筛选域的预判，未来不能只有规则，因此我改这个领域不应该影响其他的系统)

面向对象 - 实体，值对象，聚合根，领域服务

活动有不同的状态，但同一个活动是有唯一id的， 我可以通过id知道此时活动的状态，因此他是实体。
库存无状态，因此是值对象。

活动、档位都是聚合根吗？
活动是有数十万人群的，如果是一个根，可能有性能问题。因此参与人群应该是一个独立的聚合根。
档位会很复杂，那应该不是一个根，而是一个子域。
如果档位很简单，则可以作为活动的聚合根的一部分，满足业务完整性需求。
活动下线了，可能参与凭证依然需要存在，即凭证的有效性，比活动的生命周期还长很多。即活动下线了，凭证可能还在执行，等待凭证的用户是否后期完成任务。
因此凭证的周期可能与活动不一致，而且有一个复杂度，因此单独一个聚合根。

无论怎么拆分，业务逻辑对应的代码都是存在、不变的，只是聚合根的本质是业务封装和适度之间的平衡与取舍。


每个实体/值对象都是一个聚合根:数据一致性难保证。或者外界要懂你的领域内容，比如库存调整会影响活动，如果实体单独是一个聚合根，外界是很难做到活动与库存的一致性的。

领域服务：不适合放在聚合根里的逻辑
只有方法，没有属性，因为有一些方法，不适合放在根里面。可以抽象出领域服务来。多个根可以互相协作。

封装业务规则：CRUD -> 领域模型 的转变。每一次写代码，都要把代码解释成领域模型。
避免一个方法非常复杂，而是拆分成多个方法，但依然不是领域模型，本质上也没有变化。
因为如何复杂了，完全可以设计成领域模型。

商业套件，只是提供了各个领域的模型，我会提供适配器，与各个平台进行打通。

问答:
1.通话笔记，待办，之间有业务一致性、业务逻辑，不能强行做成一个聚合根。职责不单一，扩展待办的时候，扩展电话笔记都会影响聚合根。如果电话超过了一定s，发送一个事件，待办接到消息后，作为有效电话，做成待办完成。
通过事件-消息驱动，完成了笔记和待办之间的解耦。
