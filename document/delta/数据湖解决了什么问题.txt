总结:
数据湖就是在HDFS做存储的基础上，增加了一层能力建设，支持insert/update操作,支持增量添加数据,支持版本控制,支持数据权限。本质上还是存储层。

优点:
1.解决数据孤岛,把多个数据源整合在一起。

缺点:
1.结构化与非结构化数据,非结构化数据没有被很好的存储。
2.没有保留原始的数据。数仓展示的是app层，没有明细数据。


功能 --- 统一的存储&&处理能力，可以做流批处理,使用简单。
1.存储海量原始数据。
2.存储各种格式。
3.较好的分析和处理能力。


数据湖理念:
1.存储原始能力--结构化、半结构化、二进制等。
2.灵活的底层存储
HDFS/S3等平台。
Avro/orc等格式。
轻量级索引。
3.完善的数据管理
多数据源接入。数据连接。schema管理。权限管理。
4.多计算模型
批处理，流处理，交互式分析、机器学习。
5.事务支持。
6.端到端流-支持增量的处理，类似kafka，比如apache hudi支持。


数据湖与数仓区别
1.数据价值无需提前明确，先直接存进来。而数仓的数据价值必须提前明确后再存入。(积累)
2.数据存储后再定义schema，而数仓要先定义schema,在存储数据。
写时模式:数据写入前,定义好schema。按照schema定义写入。
读时模式:写入的时候不需要定义schema,在需要的时候在定义schema。因此一个数据源可以在不同需求的时候定义不同的schema。修改schema的成本极低。
3.可以存储结构化和非结构化的数据。
4.支持增量updateinsert操作。而数据仓库需要自己做merge来增量存储数据。


实时数仓痛点：kafka的存储没有办法进行olap在线分析。
痛点1:无分层，没有中间结果，直接入库。
优点是简单开发
缺点:没有模型，数据无法复用，浪费计算资源

痛点2 多分层，中间结果存储在MQ
优点:有数据模型可复用。整体数仓延迟低。
缺点:kafka无法支持海量数据存储， 以及 无法进行中间模型的olap分析。


离线数仓痛点
痛点1:
TB级数据T+1离线跑批失败，重跑时浪费资源。
痛点2 写模型时，如果字段发生变更比较麻烦。

lambda架构痛点
离线数仓的数据写入hdfs，实时数仓的输出写入hbase、doris，那么不同的数据源如何merge是难点。
lambda架构的数据merge成本高。


数据湖的优势
分钟级别响应，高效的upsert操作、高效的回溯能力、支持schema变更、支持ACID语义、支持flink写入操作、支持小文件压缩合并。
