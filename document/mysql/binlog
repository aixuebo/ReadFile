一、解析binlog
1.因为binlog是二进制的,因此要可视化必须用工具
 /server/mysql/bin/mysqlbinlog /server/data/mysql/mysql-bin.000748 | more
2.用命令行的方式查看binlog的内容
 /server/mysql/bin/mysqlbinlog -vv /server/data/mysql/mysql-bin.000748 | more
 hexdump -C /server/data/mysql/mysql-bin.000749 | more 查看文件二进制形式

3.简单的根据时间查看相对binlog内容,此时只是相对内容,详细内容还是要通过canal
  /mysql/bin/mysqlbinlog -d test --start-datetime='2017-10-30 19:10:01' -vv /mysql/data/mysql-bin.001915 | more
  注意 上面的sql查询的只是test这个库的,即对binlog进行过滤,方便测试查看binlog日志结果
4.flush logs;  重新切换产生一个新的binlog日志文件

二、用sql去查看binlog的内容---可以用于查看binlog当前日志中第一个binlog的位置
SHOW BINLOG EVENTS IN 'mysql-bin.003996' LIMIT 10 查看具体的某一个文件
SHOW BINLOG EVENTS LIMIT 10
语法规则:
SHOW BINLOG EVENTS [IN 'log_name'] [FROM pos] [LIMIT [offset,] row_count]
其中in 表示查看哪个binlog日志,从哪个位置开始,limit与sql的limit语法一样


输出内容:
Log_name,Pos,Event_type,Server_id,End_log_pos,Info
mysql-bin.003996,4,Format_desc,1,120,SERVER ver: 5.6.27-LOG, BINLOG ver: 4
mysql-bin.003996,120,QUERY,1,205,BEGIN
mysql-bin.003996,205,QUERY,1,365,USE `ambari1`; UPDATE alert_current SET latest_timestamp = 1508806477203 WHERE (alert_id = 790)
mysql-bin.003996,365,QUERY,1,525,USE `ambari1`; UPDATE alert_current SET latest_timestamp = 1508806477203 WHERE (alert_id = 799)
mysql-bin.003996,525,QUERY,1,685,USE `ambari1`; UPDATE alert_current SET latest_timestamp = 1508806477194 WHERE (alert_id = 819)
mysql-bin.003996,685,QUERY,1,845,USE `ambari1`; UPDATE alert_current SET latest_timestamp = 1508806477208 WHERE (alert_id = 820)
mysql-bin.003996,845,QUERY,1,1005,USE `ambari1`; UPDATE alert_current SET latest_timestamp = 1508806477210 WHERE (alert_id = 923)
mysql-bin.003996,1005,QUERY,1,1165,USE `ambari1`; UPDATE alert_current SET latest_timestamp = 1508806477198 WHERE (alert_id = 924)
mysql-bin.003996,1165,Xid,1,1196,COMMIT /* xid=1457161570 */
mysql-bin.003996,1196,QUERY,1,1271,BEGIN

三、SHOW MASTER STATUS 查看当前binlog位置
结果集:
FILE,POSITION,Binlog_Do_DB,Binlog_Ignore_DB,Executed_Gtid_Set
mysql-bin.003996,803153111,,,

四、查看slave的binlog信息位置
SHOW SLAVE STATUS
结果输出字段
Slave_IO_State,MASTER_HOST,MASTER_USER,MASTER_PORT,Connect_Retry,MASTER_LOG_FILE,Read_Master_Log_Pos,RELAY_LOG_FILE,RELAY_LOG_POS,Relay_Master_Log_File,Slave_IO_Running,Slave_SQL_Running,Replicate_Do_DB,Replicate_Ignore_DB,Replicate_Do_Table,Replicate_Ignore_Table,Replicate_Wild_Do_Table,Replicate_Wild_Ignore_Table,Last_Errno,Last_Error,Skip_Counter,Exec_Master_Log_Pos,Relay_Log_Space,Until_Condition,Until_Log_File,Until_Log_Pos,Master_SSL_Allowed,Master_SSL_CA_File,Master_SSL_CA_Path,MASTER_SSL_CERT,MASTER_SSL_CIPHER,MASTER_SSL_KEY,Seconds_Behind_Master,MASTER_SSL_VERIFY_SERVER_CERT,Last_IO_Errno,Last_IO_Error,Last_SQL_Errno,Last_SQL_Error,Replicate_Ignore_Server_Ids,MASTER_SERVER_ID,Master_UUID,Master_Info_File,SQL_Delay,SQL_Remaining_Delay,Slave_SQL_Running_State,Master_Retry_Count,Master_Bind,Last_IO_Error_Timestamp,Last_SQL_Error_Timestamp,Master_SSL_Crl,Master_SSL_Crlpath,Retrieved_Gtid_Set,Executed_Gtid_Set,Auto_Position
通过下面四个属性,可以知道该slave读取到master哪个binlog文件,哪个偏移量位置了,以及master的host和port是什么
            String masterHost = maps.get("Master_Host");
            String masterPort = maps.get("Master_Port");
            String binlog = maps.get("Master_Log_File");
            String position = maps.get("Exec_Master_Log_Pos");
            return new SlaveEntryPosition(binlog, Long.valueOf(position), masterHost, masterPort);

五、show variables like 'binlog_format';   显示mysql此时的binlog格式-----statement-based、row-based、mixed。
目前canal只能支持row模式的增量订阅(statement只有sql，没有数据，所以无法获取原始的变更日志)

六、show global variables like 'binlog_checksum' 获取master的校验和方式,比如是CRC还是None

七、mysql binlog 请求图
1.客户端发送请求
2.master ----response握手协议
3.客户端---发送show master status命令,获取主库的binlog文件以及目前主库的offset
4.客户端发送show global variables like 'binlog_checksum' 获取master的校验和方式,比如是CRC还是None
5.返回master的校验和方式
6.因此不断的发送binlog的dump命令获取一个binlog事件

八、binlog的mysql-bin.001916这个ID是自增长的,每次执行flush logs; 或者达到一定大小后,会自动切换新文件。
那么这么下标最大是多少呢,是2^32次方-1,因此正常情况下一辈子也达不到这个最大值。

有效的binlog的日志都会在mysql-bin.index索引文件中引用,该索引文件中未引用的binlog文件,是不会被mysql管理的

九、binlog的配置
1.binlog_format的格式
mixed、row、statement
2.expire_logs_days = 7 日志过期7天,会删除以前的日志
3.log-bin=mysql-bin 打开binlog
4.server-id = 1设置master的id
5.max-binlog-size 设置每一个binlog文件的大小,达到该伐值则切换日志
6.binlog-do-db和binlog-ignore-db表示哪些数据库需要同步binlog 和哪些数据库不用同步binlog

非必要的配置
slow_query_log_file = /logs/mysql_slow.log 设置慢sql的路径
log_error = /logs/mysql_error.log 设置错误的日志路径

十、删除binlog信息
pruge master logs to binlogName
pruge master logs before Date

十一、目前canal的server同步的数据都在内存存放,而客户端针对一个队列只能有一个客户端,因此要将该客户端读取的数据写入到kafka或者mq里面,用于多个消费客户端去消费。
比如binlog的数据要写入到redis、es、mysql、hive中,一个客户端就比较麻烦,比如直接客户端写入到kafka,然后不同消费者去kafka读取数据

