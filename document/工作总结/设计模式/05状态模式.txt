一、背景与总结
1.容易与策略模式混淆。
策略模式，需要客户端知道所有的策略，压力都在客户端。
状态模式下，客户端不需要知道所有的策略。
	每次切换一个动作，都会发生一个状态的变化，每一个状态都有共同的接口函数名称，但不同状态实现(策略)是不同的。
2.策略模式客户端选择一个策略后，就不变化了，执行该策略代码即可。
而现状是，客户端只需指定初始状态，而具体执行的时候，可能很多策略都会被执行，只是时间点不同。
因此状态模式中context有set策略方法，随着动作的发生，执行策略的方法，然后切换策略到下一个状态，因此再次调用context的方法时，就换成下一个状态的策略了。
这个过程对客户端是解耦的，客户端还是调用context的某个固定方法，但内部其实已经自己变换了下一个状态的策略方法了。

3.每一个状态只关注他能切换到什么状态即可。
上下文context是不关注状态之间的关系的。
客户端调用context的同一个动作，因为状态的不同，执行代码是不同的，但客户端是无需有任何改动的，对客户端解耦。

二、举例
1.状态+动作
状态:未投币、已投币、出售商品、商品售罄。
动作:投币、退币、转动手柄、出售商品。

初始状态 + 动作 --> 变更状态。

2.时序图
a.客户端main --> 创建Context对象，持有一个初始化的状态；比如状态未投币
b.main发生请求

3.State对象 --- 持有所有的动作接口
有5个方法，分别是 投币、退币、转动手柄、出售商品。

4.每一个状态对象实现类，要实现所有的状态对象动作
private Context context;//每一个状态对象都持有上下文
构造函数传递context对象

public void 投币(){
  执行代码逻辑
  context.setState(context.getXxxState) //执行完代码后，切换下一个动作
}

如果该状态下，不能实现该动作，则抛异常即可。

4.Context对象
a.持有所有的State具体实现类。
private State State1 = new State1(this);
private State State2;
。。。
b.private State currentState ;//当前上下文执行的状态是谁
c.有context.setState方法，切换State状态对象。
d.状态上下文也要实现State的动作接口
每一个方法是调用 currentState.动作即可。



