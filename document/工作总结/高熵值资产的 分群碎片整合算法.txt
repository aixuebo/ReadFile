
一、背景
1.现在有3000个资产。
2.因为合规要求,一个资产最多只能匹配200个用户
3.每一个资产的总金额不能变化,比如资产需要100万,无论怎么调整,这个资产依然是100万,最多200人
4.现存在的问题
a.资产匹配时间久
因为最多200人一个资产，如果已经有200人了，则一旦一个人想赎回，那么他在这个资产上有1万元,想赎回500,则肯定不能赎回出来，因为队列不能再加入人了。
唯一的可能是他必须赎回一万,然后有一个人投资一万,如果投资人不是投资一万,则也没办法进去，因为这个资产差一个人，一万块这个硬性指标。
因此解决方法是一个资产虽然上限200人,但是如果资产上的人数越少，越容易匹配。
b.上面的解决方法牺牲了资产多元分配的原则,都划分到一个资产上去了。
c.为什么会有200人在一个资产上,经过分析发现很多小额资产在上面,因此研发先将几块钱的资产清除掉，不让他占用名单,因为这笔钱利息不会产生太多，但是却占据了人数这个坑指标。
d.因为有3000个资产，每个资产200人，最多我们能容纳60万人，前提还是一个人只使用了一个资产
如果一个人占用多个资产，则目前规模能满足的人数一定小于60万。
e.如何解决动态重新规划资产的时候,用户毫无感觉
用户对利率敏感,而如果改动过程中,不改变利率,在相同利率的队列中,如果一个用户存在多个资产,可以将其多个资产进行整合。
因为目前资产的利率是固定分为11个,因此将其算法分为11个队列即可

二、名词解释
Target_user（目标用户）：资金汇集的用户对象。
Container（容器）：target_user资金的目标汇集资产。
Mover（清除者）：container上除target_user外的用户对象。
Replacer（替换者）：用来替换mover的资产对象。

比如
1.在一个相同的利率的队列里面,按照userid分组.得到集合List1,即可以获取每一个userid被分配了多少个资产。从大到小排列
2.从队列List1中循环每一个userid,此时该userid就是目标用户
3.因为List1中每一个userid对应多个资产,其中第一个资产是该用户金额最大的,因此称之为容器,即优先将其他资产的钱转移到第一个容器中。
一旦第一个容器转移满了,再向第二个资产转移，此时第二个资产就是容器了。
转移的过程中是从最小的资产向容器中添加.而容器的顺序是从最大的开始,因此直到容器就是最小资产的时候,循环结束
4.因为其他资产的钱要添加到容器中,因此容器中就得有其他用户的金额被交换到其他资产中,此时容器中要调离出去的用户称之为Mover.即容器中除了userid自己外,都可以是Mover。
5.其他资产中该用户的资金用于转移到容器中的都称之为Replacer

注意:
1.期间一个用户只有一个资产的时候,是不需要进行调整他的
2.比如userAAA的容器此时含有BBB
要替换的Replacer的资产一定满足，该资产队列上既包含AAA,又包含BBB,因此可以保证经过调整后,一定会少一个坑位出来。
3.比如容器含有BBB用户的资产为1万元
但是要替换的AAA的资产为8000元,可以将AAA8000直接赋予容器,同时容器中BBB减少8000,变成2000,容器总资产未变化。
同时资产中因为AAA的资产全部没有了,因此AAA的坑空余出来。因为BBB是存在与资产中的,因此BBB多加8000即可保证资产中总资产未变化

三、算法实现
针对一个利率的user集合
for（target_user  in  目标用户集）{//循环每一个用户
	获取目标用户所在资产列表，按金额降序排列，获得container选择集container_list；
	while(container_list元素数量>1){//说明用户有多余一个资产,因此可以进行整合
		container = container选择集[0] //获取最大的资产
		mover_list = container资产上除target_user外的用户集合
	    replacer = container选择集[1:]//表示除了最大的资产,其余所有剩下的资产集合
		for(mover in mover_list){//循环容器上每一个mover用户,找到该用户必须在其他资产中存在,则进行处理
			判断是否有机会执行整合方法:
			if(不可以执行){next}//说明此时该用户不再其他资产中存在
			else{按整合方法获得整合记录，更新资产匹配情况}//说明在其他资产中存在,则进行整合,减少一个坑位
		}
		container = replacer//此时该容器处理完成,容器切换到第二个资产上,注意此时可能因为经过上面的转换,已经资产中不存在该用户了
	}
}

