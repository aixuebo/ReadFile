STAR法则：即在什么情况下(S)，承担了什么任务(T)，采取了什么行动(A)，实现了什么结果/效果(R)。
改进版
背景 + 遇到了哪些问题或者痛点，我们的任务是什么，采取了哪些行动，结果是什么(结果需要有量化指标)。

案例1:
主题:我认为自己在以xxx上做到了"主动服务"
背景S:我们组开发应对的客户主要是上游开发、商服、产品等，各方对订单业务的诉求比较头条，现有订单系统、风控查询主要依赖xx等不同的系统，查询链路多并且繁琐。
目标T:提人效,常规业务查询都可以在xxx系统查询，同时承接客户的新通用需求。
行动A:1.为新同学提供产品层面的建议和指导，分别开发xxx系统。2.主动与别的团队沟通，找到新需求，比如poi风控展示、预收款运营入口等。
结果R:目前处理预收款系统尚在对外开放外，其余功能均已上线,并且线上运行良好。目前日均订单搜索pv在xxx。

案例2:
T也可以代表挑战。
(S/T) 公司需要在2月底前，开办线下活动M。活动M需要将D系统做二次开发，时间紧，任务重。
(A)我快速地组建了项目团队，明确职责分工，并制定了项目计划。因为时间紧任务重，我要求项目组成员对进度报告精准到天，并为保证系统顺利上线采取了2个措施：1……2……。
(R)中间的人力风险，技术攻关风险，都被提前发现并解决。D系统的二次开发在早于活动两周的时间完成，预留了更多的用户验证时间。最终活动M顺利举办。 

真实案例
Situation：     
背景:数据看板的承接工具,一直都是用版本1来承接，但版本1一直存在一些问题，工具产品不迭代、无法提供诊断功能、用户看数-分析-诊断链路的数据体验不够流畅；同时由于总部权限无法拆分更细颗粒度,造成同一个看板需要复制N份+配置化的方式支持各业务线，造成维护成本极高。业务侧急需一种快速交叉分析能力的看板。
挑战:查询相应耗时在5s内，并且无明显的查询异常，基于历史xx看板的经验来分析，这个要求耗时偏高的。
Target：    ①为各业务线提供统一经营数据分析看板；    ②页面操作流畅、用户产品体验好、要求查询性能在5s内返回；    ③权限支持总部+业务线颗粒度。
Action：    ① 模型颗粒度拆分：可累加指标、降维可累加指标、不可累加指标。
    ② 针对可累加指标，利用doris的聚合模型能力，直接聚合；针对不可累加指标，使用cube方式实现。
    ③ 分析用户使用场景与维度组合后的数据量，优化rollup策略，提高查询相应效率。策略如下：总部与一线的拆分(减少组织结构维度的影响)、高频维度与低频维度的拆分(比如商家三级品类、商品三级品类)。
Result：
  ①看板供给 指标134个，维度22个的矩阵。  
  ②数据侧3s内返回结果，并且查询异常率0%。