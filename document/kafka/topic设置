一、通过broker_list如何知道zookeeper信息
知道broker_list的话,进入任意一台broker节点的conf目录下,执行cat * | grep zookeeper
找到zookeeper.connect=datanode01.xxxx.com:2181,datanode02.xxxx.com:2181,datanode04.xxxx.com:2181
此时就是zookeeper的连接
该连接可能在server.properties 或者 zookeeper.properties配置文件中

二、partitions参数,设置topic的partiton数量

创建topic
./kafka-topics.sh --zookeeper datanode01.xxxx.com:port --create --topic topicName --partitions 1  --replication-factor 3 //创建topic
./kafka-topics.sh --zookeeper datanode01.xxxx.com:port --describe --topic topicName  //查看topic的信息
./kafka-topics.sh --zookeeper datanode01.xxxx.com:port --list //查看所有的topic
消费者aaa.properties文件定义group.id=test auto.commit.interval.ms=5000
./kafka-console-consumer.sh  --zookeeper datanode01.xxxx.com:port --property print.key=true --topic topicName --from-beginning smallest consumer.config /kafka-broker/bin/aaa.properties //模拟消费者,但是该消费者不会移动offset位置

输出到文件中 追加: | grep "\"table\":\"bank_card\"" >bbb.txt

注意:
1.一旦设置了该属性--from-beginning,则就一定是从smallest开始读取数据,如果没有设置该属性,则从最新的位置开始读取数据,即largest,即设置的是auto.offset.reset属性
2.--property print.key=true表示打印kafka的key信息

生产者
./kafka-console-producer.sh --broker-list ip:prot,ip:prot,ip:prot --topic topicName //创建生产者,可以向里面写入数据
注意:--broker-list参数的内容来自于zookeeper,而当执行消费者的时候就会有打印粗话--broker-list的参数,将其复制过来即可


三、常用命令
启动zookeeper
bin/zookeeper-server-start.sh config/zookeeper.properties &  这种方式说明在zookeeper.properties配置文件中配置好zookeeper的地址,这样kafka会启动zookeeper,不需要单独的启动zookeeper服务

或者 在server.properties配置文件中找到zookeeper.connect配置,说明采用的是外部zookeeper服务方式,即zookeeper服务与kafka解耦,分别启动zookeeper服务


启动kafka

bin/kafka-server-start.sh config/server.properties &

停止kafka
bin/kafka-server-stop.sh

停止zookeeper
bin/zookeeper-server-stop.sh

四、出现的问题
kafka Failed to send messages after 3 tries
a.window上
ping ip可以通,说明网络没问题
telnet ip port 通不过,说明端口有问题,可能是防火墙的问题,把防火墙关闭了再测试一下

b.确定ip是否填写错了,确保broker的ip是正确的

c.配置host
将本地的host配置上kafka节点需要的host

d.访问zookeeper,查看/broker/ids/id对应的broker到底是哪个ip:port,此时

五、关键参数
linger.ms=100表示100s内的数据,kafka客户端的数据一起发给kafka集群.可以减少性能。缺点就是kafka接收到的数据可能有延迟
buffer.memory用于配置producer端等待向server发送的数据的缓冲区的大小，默认值为32MB
max.block.ms=5000当生产者比kafka要消费者快的时候,要阻塞到内存队列中,并且阻塞最多就是这些时间,超过这个时间就抛异常
