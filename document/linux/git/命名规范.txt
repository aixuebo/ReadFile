分支命名规范
master（主分支，永远是可用的、稳定的、可直接发布的版本，不能直接在该分支上开发）
dev（开发主分支，该分支只做合并操作，不能直接在该分支上开发）
qa（测试主分支，该分支只做合并操作，不能直接在该分支上开发）
feature-xxx（功能开发分支，在master上创建分支，以自己开发功能模块命名，开发完成后合并到dev分支，提测的时候合并到qa分支，上线集成的时候需要合并到release分支）
release-${发版日期} (发布分支，基于master分支创建，主要是用来上线集成的分支，集成测试通过后合并到master分支)
release-${发版日期} -fix(功能bug修复分支，在release上创建分支修复，修复好提测的bug之后合并回release分支)
hotfix-xxx（紧急bug修改分支，项目上线之后可能会遇到一些环境问题需要紧急修复，流程跟release分支相似，修复完成要上线的时候合并master分支）
optimize/优化的主要功能_*      单元测试改进；演示改进；样式优化等不涉及 API 改动的优化，例如:optimize/white_apply_query 优化美补白名单的查询功能
doc/文档的主要功能描述_*        文档与演示相关的改进修复,例如:doc/white_apply_api_doc 美补白名单的api功能描述文档


commit规范
修改类型
- feat：新功能（feature）
- fix：修补bug
- doc：文档（documentation）
- style： 格式（不影响代码运行的变动）
- refactor：重构（即不是新增功能，也不是修改bug的代码变动）
- test：增加测试
- chore：各类杂事，构建过程或辅助工具的变动

描述信息
subject是 commit 目的的简短描述
