一、两种模式
grep [OPTIONS] PATTERN file1,file2
标准输入  | grep [OPTIONS] PATTERN
a.可以在匹配模式后面 添加多个文件,即从这些文件中查找匹配
b.PATTERN 是正则表达式


1.搜索指定关键词,但是不知道他在哪个文件中
grep -w "xxxx" click_data.20140716.*
搜索包含"xxx的文件名"

2.获取前后行
a.grep -A5 -w 8088 *
A表示append,即找到符合的行后,追加5行都显示
b. grep -B5 -w 8088 *
B表示Before,即找到符合的行后,前5行显示
c.cat /etc/passwd | grep -C 3 root 表示前后个获取3行

3.grep -n 8088 *
-n表示显示在文件中的行号

4.-i 忽略大小写

5.-r 是递归查找 -R 查找所有文件包含子目录

6.例子
\< 和 \> 分别标注单词的开始与结尾。
例如：
grep man * 会匹配 ‘Batman’、‘manic’、‘man’等，
grep '\<man' * 匹配‘manic’和‘man’，但不是‘Batman’，
grep '\<man\>' 只匹配‘man’，而不是‘Batman’或‘manic’等其他的字符串。
'^'：指匹配的字符串在行首，
'$'：指匹配的字符串在行尾，

7.grep -lR   "some_code"  path
grep -R   "some_code"  path
如果你不需要显示内容，只需要含有某个字符的文件：
附录：
grep -R 和 -l 参数
　　-R, -r, --recursive
递归地读每一目录下的所有文件。这样做和 -d recurse 选项等价。
　　-l, --files-with-matches
禁止通常的输出；作为替代，打印出每个在通常情况下会产生输出的输入文件的名字。对每个文件的扫描在遇到第一个匹配的时候就会停止。

demo
grep -l sdfsdf /root/upload/metadata/metamap/*

8.查看源代码
find . -name '*.java' | xargs grep --color 'main(' | awk '{print $1}' | uniq | grep -v test

9.选项-a将二进制文件当成文本文件处理
grep -a online /usr/bin/ls

10.-v 表示取反

11.\用于转义,比如要查询的内容包含""
grep "\"table\":\"bank_card\""

12.过滤的内容是正则表达式
grep -E "2017-12-10|2017-12-09" 即过滤包含2017-12-10或者2017-12-09的数据,正则表达式也可以写成2017-12-[09|10]

二、vi
1.查看二进制
vi -b 文件名

2.vi无法回到上一行结尾--设置参数即可
vi ~/.vimrc
set backspace=2

3.设置文件编码
vim /Users/maming/Downloads/20200422tag2.csv
:set fileencoding=utf-8   设置utf编码  
:set fileencoding 查看编码
设置完成后，在该文件中生成文件内容即可

三、date
echo `date -d "-1 day" +%Y-%m-%d-%H-%M` 表示前天时间2017-06-12-15-19

四、xargs
redis-cli hkeys key | grep -E "2017-12-10|2017-12-09" | xargs redis-cli hdel key
属于管道,比如 redis-cli hdel key + value,此时的value是xargs结果集中一行一行数据代替value的含义,工作中很重要
