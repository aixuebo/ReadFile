一、背景、结论、总结
1.缓慢变化维
维度属性不是一直静止不变化的,而是可能会变化，但是变化频率不高，比如用户所在城市，用户可能离开城市去一个新的城市。
有3种方式处理该问题:
a.直接更新，不保留历史。
101	luna	Chengdu --> 101	luna	beijing ,离开成都去北京。
b.针对变化的数据,增加一列。
101	luna	Chengdu	beijing
缺点是 如果变化N次，增加N个字段，不够标准化。N是几是不固定的。
c.添加一行数据，相当于拉链表。
101	luna	Chengdu
101	luna	beijing
缺点是如果其他表通过id关联维度后，会产生多条数据。主要原因是该表没有唯一主键，此时一个etl自动生成一个代理键。
但又不知道哪条数据是最新的，怎么办？增加时间字段，如果end_time是null,说明是最新数据。
sk_id	id	name	city	start_time	end_tinme
001	101	luna	Chongqing	2017/08/27	2018/06/20
002	101	luna	Chengdu	2018/06/20	NULL
d.维度快照，每天一个全量商品的快照维度。
这样虽浪费了存储空间，但确实最常用的一种方式。

2.退化维度
即将维度信息冗余到事实表中，对于查询性能有好处，属于宽表范畴；但对于数据回刷有损害。

二、基本概念
1.在维度建模中，将度量指标称之为“事实”,将环境描述称之为"维度"。
2.维度属性，是查询约束条件、分组/分类、排序、报表标签的主要来源。
3.维度属性和维度如何获取？从业务聊天中，关键词按照xxx来查看数据，则定义为维度或者维度属性。
4.维度要有唯一主键标识，该标识与事实表关联，即事实表存储维度id即可。
唯一主键类型:
自然键，有具体的业务含义，比如商家id、商品id；
代理键，无具体的业务含义，比如流量表，此时最好需要再ETL过程中为其创建唯一ID。（当然创建唯一ID有其一定技术难度,如果用spark可能会更合适）。

代理键，一般用于处理"缓慢变化维"。即如果没有主键id,如果维度属性发生缓慢变化，需要回刷历史数据，比较麻烦。

三、维度的基本设计方法
1.尽可能丰富维度属性，几百个维度属性也无所谓。方便下游分析的时候支持各种场景分析。
2.维度属性尽量都收口在维度表中。
比如:简单的通过单表的某个字段解析；通过单表不同字段计算混合处理；通过不同表的关联；复杂的经过计算逻辑处理。
好处是下游使用方便；避免解析或者计算的逻辑口径不同而导致口径不一致；
3.数值型的字段要区分好是事实指标还是维度属性。
参考字段用途，如果用于查询条件约束、分组统计、排序,则下沉到维度属性表；
如果通常只是用于指标展示，则下沉到事实表。

如果是离散型的，维度属性概率较大；如果是连续性的,则事实指标概率较大。

四、维度的层次结构
1.层次打平，比如叶子节点id、一级品类节点、二级品类节点、三级品类节点。
缺点:
a.查询时,必须要知道想要查询的节点是第几层，然后根据第几层的字段去限制，比如 where 三级品类id = 15;
b.节点数量必须是固定的，也可以通过预留字段的方式来扩展，但扩展性差。
c.如果有的商品的叶子节点是三级、有的是二级，此时按照叶子节点做group by操作，则存在问题，不知道是二级要是三级，因此没有办法查询。
解决方法是回填，比如如果叶子节点是2级，并且假设二级节点的id=15，三级节点id是null，则回填15即可。
此时查询叶子节点的时候，只需要查询理论上最大的节点即可，比如查询where 三级节点 = 15，就可以查询到所有目标的数据。

2.层次桥接表
解决扁平化方案带来的问题。
优点:不需要知道层级数量、不需要回填叶子节点id、不需要知道查询节点所属层级是第几层。
缺点:复杂性高、使用成本高。经常用于血统系统。
表设计: 父id、子id、父子之间所属层级。

demo:
查询类目id=21.查询桥接表，可以得到所有的子id。使用子id查询事实表即可。
相当于 from 事实表 where id in (21的所以子id)

五、一致性维度和交叉探查。
比如topic表，是会横跨多个业务过程或者数据域的，比如订单表有交易信息、流量表有浏览信息，这样交叉后可计算转化率。
此时会产生2个问题:
a.流量表没有商家维度，交易表有商家维度，即两者维度不一致，此时看商家维度的转化率时，是没有办法做到交叉探查的，交叉探查的前提是维度相同。
b.就算维度相同，都有同一个维度，但可能维度值是不同的，因为来自于两个不同的业务过程，可能维度值都是1，但在不同业务过程中表示的含义不同。此时会产生数据错误。

解决方案:
a.共享维度表，即全局所有数据域共享维度表，比如共享商品维度表。因此维度值含义必须唯一。
b.交叉属性，即不同业务过程可以都有自己的维度表，但要保证维度属性定义是一致的。其实也等同于a。

六、维度表整合
1.维度表在不同业务过程或者数据域内，保持相同的名字和字段类型。
2.维度属性值要全局统一定义。
3.维度表基础维度+自定义复杂维度属性表，通过整合维度表，对外提供整体的维度表。即开发维度表要有高内聚、低耦合的特点。
水平拆分，分成公共维度+扩展维度表，不同表作用不同。
垂直拆分,分成块表和慢表。

七、行为维度 -- 也称 事实衍生维度
需要通过事实指标值,来计算维度属性。
1.定义与使用维度场景
用户常用地址维度、卖家主营类目维度，这些维度都采用算法计算得到，比如结算商家的商品分布、通过最近时间段内物流信息计算常用地址维度。
这些维度都与事实表相关，是用户行为事实表状态变化计算而来，也称事实衍生维度。

2.分类:
a.过去行为，比如:用户最后访问时间、用户最后交易时间。
b.快照事实行为维度，即维度属性值变化频繁，每天都会变化，因此每天快照存储变化频繁的行为数据。比如买家信用分、买家从年初累计到当前的交易金额。
c.分组事实行为维度，即根据事实指标进一步计算成枚举值的过程，比如按照信用分分级成枚举值、买家从年初累计到当前的交易金额转换成枚举值，是否top30%用户。
d.复杂逻辑事实行为维度，通过复杂计算得到。

3.处理方式
单独做一个扩展表，创建该维度，然后通过维度整合的方式，将行为维度整合到维度宽表中。
这样好处是 每一个行为维度都单独有入口计算，与整体维度宽表解耦。

八、多值维度
1.定义与场景:
事实表中存储多个维度值。
比如 订单事实表 + 订单商品表，一个订单可以有N个商品。
现在统计订单维度,则订单事实表中,每一条数据 对应N个商品维度。

2.处理方式
a.使用数组的方式存储多个id，查询的时候使用一对多sql语法进行转换。--- 不太常用。
b.多字段存储，用于固定数量场景。
缺点是字段数量不确定。因为一个订单有多少个商品是不定的。没办法预留字段数。
比如 房地产销售中，一个合同订单存在多个买房，比如夫妻合买。买房不会太多。
表设计:合同id、合同金额、买方user_1、买方user_2、买方user_3。
c.桥接表 --- 较为通用方案。
缺点就是逻辑复杂、开发维护成本高。
桥接表设计:只有两个事实表之间的主外键映射关系。
比如 订单id、商品id。
因此如果一个订单有3个商品id，则会在桥接表中产生3条数据。

可能存在的风险，会多次计算，比如一个订单有2个商品，分别是衣服和裤子，需要统计2015年购买衣服的订单总金额、购买裤子的订单总金额，因此同一个订单被计算了两次。
此时不一定是错误的，看业务需求场景。

九、多值属性
1.定义与场景:
维度表中,某一个属性值字段，可能存在多个值。
比如商品spu，有多个sku；商品spu有多个属性值；商品spu有多个标签等。
因此商品spu和sku、属性值、标签是多对多的关系。

2.处理方式
a.多值属性，使用json形式存储所有属性值。
优点是扩展性好，缺点是数据处理和使用较麻烦。
b.多个属性值存储在多个字段中，前提是字段数量是固定的。
比如卖家主营类目，虽然可能很多，但业务明确只计算卖家top3的主营类目，因此扩展3个字段即可。
比如表设计为 卖家id、主营品类id_1、主营品类id_2、主营品类id_3
c.联合主键
比如 spu_id+sku_id，即如果一个spu对应3个sku,则产生3条数据。
优点:扩展性好，使用方便。
缺点:spu明明就需要一个维度表，现在需要拆分成N套维度表；数据急剧膨胀。比如spu+spu属性维度表，一个spu的属性可能几百个，而spu本身也有亿级别体量，这样就是几百亿条维度信息。
比如spu维度表、spu+sku维度表、spu+标签维度表、spu+属性维度表；