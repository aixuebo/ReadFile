一、背景、总结
1.退化维度,将维度属性存储到事实表中,降低查询join性能,但同时增加了回刷成本。
2.事实表分类:
事物事实表:主要描述业务过程中某一个时间点的指标度量值。保存的是最源自的数据。也称为原子事实表。
周期快照事实表:周期的对事物事实表进行快照。
累积快照事实表:比如订单生命周期跨多天,甚至100天，因此同一个订单要回刷100天数据成本高，解决方案是最近100天的订单放在同一个分区内，使用多个字段识别每一个业务过程的时间点等分析信息。
无事实的事实表:比如流量日志表；维度的多对多的关联表。
聚集型事实表 -- aggr层设计

二、事实表基础
1.事实表特征，围绕业务过程设计事实表，由业务过程中指标度量+维度组成。
2.事实表有自己的主键，该主键细节程度称之为粒度，即比如订单事实表，主键肯定是订单id。
3.事实表指标度量的分类:
可加性:任意维度都可以累加，都有意义。
半可加性:只有特定维度的汇总才有意义，比如库存，按照商品和地点汇总是有意义的，但是按照时间维度，统计一年内的库存累加起来是没有意义的，但指标本身是可以累加的，只是无意义。
不可加性:比如去重复的指标。比例类型指标，但这类指标属于计算指标，可以通过拆分变成可累加指标。
4.退化维度,将维度属性存储到事实表中,降低查询join性能,但同时增加了回刷成本。

三、事实表设计原则
1.只选择与业务过程相关的事实指标。
比如订单下单的业务过程中，不应该存储支付金额这个支付业务过程的事实指标。
2.事实表中存储非计算指标，计算指标收口在topic或者app或者工具侧。
3.事实表粒度非常重要，因此要优先思考粒度。
事实表粒度非常重要,标识事实表中一行数据在业务中的细节层次。
粒度相同的事实表和维度表，可以进行聚合，产生更复杂的指标。
选择粒度建议从最低级别粒度开始，比如订单粒度，因为原子粒度可以提供最大限度的灵活性，
4.同一个事实表中,粒度唯一性,不允许出现不同粒度的指标信息。
比如一个订单有3个商品，在商品明细表中,只能存储商品自己的金额，不能存储订单的金额，订单的金额必须在订单粒度内存储。
如果粒度混乱,假设在商品明细表中冗余了订单总金额，那么当用户用订单总金额参与sum时,会产生混乱。
5.同一个事实表中,单位要保持统一。
比如所有金额的单位都要是分，不能有的是分，有的是元。
6.对事实表的null值要处理。
因为null值对常用的数值类型的过滤条件不生效,同时>、<、=、>=等也不生效，因此建议用0填充。
7.使用退化维度提供事实表的易用性。
但实际开发中,建议对事实表提供下游view,在view中引入退化维信息。这样避免回刷数据的同时,下游使用数据也是很方便的，缺点就是查询慢,因为没有物化操作。

四、事实表设计方法
1.选择业务过程以及确定事实表类型。
比如业务过程细化的话,买家下单 --- (创建订单) -- 等待买家付款 -- (买家付款) -- 等待卖家发货 -- (卖家发货) -- 等待买家收货 -- (买家确认收货) -- 交易成功。
其中括号内容表示动作。

是选择某一个业务过程创建维度、事实表，还是把若干个业务过程组合起来创建维度/事实表，取决于业务需求的迭代开发效率平衡。
选择了业务过程方式后，相应的事实表类型也确定了。
比如选择买家付款这一个业务过程，那么事实表就只包含单一业务过程，即单事物事实表类型。
选择所有的业务过程组合,并且要分析各个业务过程之间的时间间隔，那么事实表是包含了所有过程的累计快照事实表。
即某四个字段，分别表示每一个过程的发生时间；也可以扩展其他信息，他们作为整体做事实表，比较常用。比如订单宽表。

2.声明粒度
比如一个订单会有N个商品，因此相当于产生N个子订单。因此粒度最好是子订单商品粒度。至少子订单要有事实表。

3.确定维度
事实表粒度确定后，相当于确定了主键，或者维度组合信息，因此维度表也确定了。丰富维度属性即可。

4.确定事实 --- 明确要有哪些指标覆盖

5.创建view视图层,冗余维度。
提高用户使用便捷性。适当的情况下,可物化。

五、事物事实表 -- 实战
设计理念与方法论:
1.订单是交易行为的核心,包含多个业务过程，比如下单、支付、成功完结等；本节介绍多业务过程组合场景下事物事实表的设计方式 以及 订单中关于邮费和折扣分摊到子订单的算法。
2.选择业务过程
虽然维度建模理论，建议每一个单独的业务过程都有自己的事物事实表，但实际场景没必要，增加开发难度。所以更多的采用多业务过程组合的方式创建事实表。
3.确定粒度
业务过程包含下单、支付、发货、成功。
而一个订单由于有多个商品，因此每一个商品都是一子个订单id，标识归属哪个父订单id。
因此每一个子订单id作为事务事实表的一行粒度，包含子订单id、父订单id、交易时间、卖家、买家、商品等维度也就随之确定。
发货这个业务过程虽然也可以按照子订单去发货，但实际操作中，卖家更多的是以物流单粒度，而非子订单粒度。同一个子订单可以被拆分多个物流单发货。因此秉承最小粒度原则，选择物流单粒度。
4.确定维度
这个很明确了。
5.确定事实
需要把下单、支付、成功完结三个业务过程所有的事实指标,都存储到事实表中。
其中细节:由于我们是按照子订单粒度拆分的,因此针对一些父订单金额需要分摊到子订单上，要有一定的计算方式，比如父订单邮费分摊、父订单折扣分摊。
6.采用视图的方式，冗余退化维度

(一)、单事务事实表 -- 实战
每一个业务过程设计为一个独立的事实表。
优点是最小粒度的为每一个业务过程参与独立分析。
实践中不是很常用。

(二)、多事务事实表 -- 实战
1.多个业务过程组合成一个事实表，即同一个事实表包含不同的业务过程，实践中较为常用。
2.实现方法
多业务过程的字段打平；或者添加标识类型,识别多业务过程数据，该模式用于多业务过程字段相同率较高场景。
3.关键实现思路
a.如果不是当前业务过程的度量，则使用0值处理或者null值处理。
比如下单业务过程中,对于支付度量和成功完结度量全部设置为0。
b.同时打标，当天是否下单、当天是否支付、是否支付、是否完成订单等业务状态标签。各标签互不相关。
c.收藏和加购物车，行为类似，但属于不同业务过程，此时设计方式使用相同的字段存放不同的业务过程的事实表，通过标签字段区分业务过程。

六、周期快照事实表
比较常用的设计模式，简单的理解成“事物事实表”的周期性快照统计，比如按天快照，或者按周快照统计。

七、累积快照事实表 -- 不常用，但必要场景下必不可少。
1.使用场景
由于订单生命周期可能不是当天，因此快照表按照订单id分区，无法满足需求，需要每天回刷N天的订单数据，回刷成本高；
比如 统计 买家下单到支付的时长、买家支付到 卖家发货的 时长。
对于类似于研究事件之间时间间 隔的需求，采用累积快照事实表可以很好地解决。

2.设计过程
a.选择业务过程。
下单、支付、运单、完成订单。
虽然配送环节是运单号，不是订单号做主键，但考虑到以订单id记录每一个业务时间点，所以本需求需要融合运单业务过程一起设计模型。
b.确定粒度。
在粒度基础上是更新操作。
所以子订单在此表中只有一行记录，事件发生时，对此实例进行更新。
c.确定维度
实际建模中，存在很多非枚举值 ，且对于每个订单都不相同，如订单的 attributes 和 options 属性 。
因此设计订单维度属性表、子订单维度属性表。即增加两种维度表，将不固定的维度信息设置到维度表中。
此种场景也可以用于流量表设计，因为流量表很多用户自定义的属性信息。但需要为每一个流量表增加一个主键。

d.确定事实度量指标
增加不同业务过程需要的时间差耗时度量指标。

3.累计快照表特点
a.数据不是新增插入操作，而是更新操作。
b.使用场景
累积快照事实表适用于具有较明确起止时间的短生命周期的实体， 比如交易订单、物流订单等，对于实体的每一个实例，都会经历从诞生到消亡等一系列步骤。
主要原因是 需要更新操作，比如订单表每天1亿条数据，但200天前的数据已经不会发生更新了，每天还在累积快照，成本开销大。

对于商品、 用户等具有长生命周期的实体，一般采用周期快照事实表更合适。即变化频率不高的或者特别频繁变化，当天即可变化完成的，用周期快照即可。比如大多数使用场景的按天快照。

c.非线性过程
正常流程:下单、支付、发货、确认。
特殊过程:下单后就关闭订单；下单、支付、退款后关闭订单；买家申请退款、卖家不通过、买家继续申请、卖家依然不通过，这样循环过程。

解决方案是 需要加一个字段状态，表示业务过程结束。结束过程标识可以通过其他业务指标去衡量，比如订单状态的结束。

4.实现方式
a.第一种方式是全量表的形式。 
此全量表一般为日期分区表，每天的 分区存储昨天的全量数据和当天的增量数据合并的结果，保证每条记录 的状态最新。 
此种 方式适用于全量数据较少 的情况。如果数据量很大， 此全量表数据量不断膨胀，存储了大量永远不再更新的历史数据，对 ETL 和分析统计性能影响较大。
b.第二种方式是全量表的变化形式。此种方式主要针对事实表数据量很大的情况。
较短生命周期的业务实体 一般从产生到消亡都有 一定 的时 间间隔，可以测算此时间间隔，比如针对交易订单，我们以 200 天作为订单从产 生到 消亡的最大间隔。
设计最近 200 天的交易订单累积快照事实表 ，每天的分 区存储最近 200 天的交易订单。
而 200 天之前的订单则按照 gmt_create 创 建分区存储在归档表中。
此方式存在的一个问题是 200 天的全量表根据商 业需求需要保留多天的分区数据，而由于数据量较大，存储消耗较大。
c.第三种方式是以业务实体的结束时间分区。比如结算系统。这个方式不好的点在于 无法与其他系统做join。因为分区口径不是事实发生的时间点的分区口径。
比如订单表以订单创建时间为分区，结算表以订单结算的日期为分区，那么这两个表就比较难join，一起看数据。

设计一个时间非常大的分区，比如 3000-12-31，存放截至当 前未结束的数据。

难点:
可能存在极特殊情况，即业务系统无法标识业务实体的结束时间。此时解决方案:
第一种方式 ，使用相 关业务系统的业务实体的结束标志作为此业务 系统的结束标志。比如针对物流订单，可以使用交易订单。理论上，交易订单完结了，则物流订单已经完结。
第二种方式 ，规定归档策略，即规定生命周期最大值，超过该最大值的，统一设置结束时间

八、无事实的事实表
常见的无事实的事实表主要有如下两种:
1.记录事件的发生。最常见的是日志类事实表。
比如用户的浏览日志，某会员某时间点浏览了 淘宝首页、某会员某时间点浏览了某卖家的店铺中的某商品详情页等 。 对于每次点击，其事实为 l，但一般不会保存此事实。
2.记录维度与维度多对多之间的关系。
比如客户和销售人员的分配情况、产品的促销范围 等。

九、聚集型事实表 -- aggr层设计
1.作用
可以减少数据库在响应查询时必须执行的工作量，能够快速响应 用户的查询。
有利于减少不同用户访问明细数据带来的结果不一致问题
2.基于原则
a.一致性:使用已存在的 事实表+维度表，组成的星型模型，在该模型基础上的宽表内进行group by聚集操作。
可以看出聚集的事实都是原始模型中的事实，聚集的维度也是原始模型维度中的商品维度，只是去掉了其他不关心的维度。

b.命名:区分统计周期。在表的命名上要能说明数据的统计周期，如 _Id 表示最近 l 天， nd 表示最近 N 天。td表示截至当天。
c.不跨数据域聚集。
聚集是针对原始星形模型进行的汇总，为了获取和查询与原始模型一致的结果，聚集的维度和度量必须与原始模型保持一致，因此聚集是不跨越事实的。
横向钻取是指，针对多个事实基于一致性维度进行的分析，很多时候采用融合事实表，预先存放横向钻取的结果，从而提高查询性 能。因此，融合事实表是一种导出模式而不是聚集。

3.缺点
聚集会带来查询性能的提升，但聚集也会增加 ETL 维护的难度。 
当子类目对应的一级类目发生变更时，先前存在的、已经被汇总到聚集 表中的数据需要被重新调整。
这一额外工作随着业务复杂性的增加，会导致多数ETL人员选择简单强力的方法，删除并重新聚集数据。
