一、背景与总结
1.当业务要求的维度很多时，比如16个维度，那么创建的维度组合行数会达到几万行。groupping set组合可能有20M。
这会很痛，因为没有办法维护。
2.解决方案是使用doris明细表导入。同时针对查询条件做rollup处理。让用户查询命中rollup。
验证方式，使用group by rollup的列，看count(*) 是不是比不用rollup的全部维度组合的count 多，以及减少的占比，比如原来是5万条，rollup后只有1万条，那就优化了5倍提升，是有价值的。

二、设计方案上的考虑
1.日周月 三种方式看数据，对于累加指标，可以直接按照dt范围查询。
比如月 可以查询 dt between and 即可。
2.对于非累加指标，需要日周月有三个不同的表承接。
3.累加指标与非累加指标要分开处理。
原因是 虽然非累加指标可以通过bitmap方式实现，但bitmap的字段特别多的时候，影响查询性能；同时也影响模型表的alter增加字段、增加rollup时候的报错。
针对非累加指标，按照模块进行拆分，转换成可sum累加的指标。


三、案例demo
1.交易累加指标表
维度：
指标:交易订单量、交易金额等。这些指标都可累加。

2.交易不可累加指标。拆分成多个模型。
用户模型：交易用户数等。
商家模型：交易商家数、营业商家数、在线商家数、商家商品数。


实现上：
商家id、sum(是否交易商家)、sum(是否营业商家)、sum(是否在线商家)、商家商品数（如果商品看数据要有商品维度视角看数据的话，那就不合适了，只能单独创建一个商品模型)

3.没有唯一主键的，不可累加指标，只能有cube或者bitmap形式。
比如 流量模型：设备DAU数。
注意要控制模型的指标数量，如果只是若干个指标，这样bitmap的扩展性也是可行的。
如果维度少，大多数维度不允许用户交叉查询，则可以考虑使用cube实现。

四、整体架构
1.指标维度矩阵
2.拆解矩阵，分模块拆解。
基础模块：交易、流量、结算(周期问题)
不可累加公共模块单位：比如商家、用户模块。
3.模块再拆解
a.可累加模型。
只有sum指标。因此日维度即可，
不需要周、月维度。
b.不可累加指标。
①合并到不可累加的公共模块，比如营业商家数。
②不能合并到公共模块的指标，单独创建模块下的不可累加模型。
比如 交易用户数 是公共模块，但如果分时段的交易用户数，则是交易模型下，按照user+时段分组的结果，需要独立模块。
③日、周、月需要不同的模型。
