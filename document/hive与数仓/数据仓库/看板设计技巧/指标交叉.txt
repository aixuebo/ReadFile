一、背景
1.看板需求中，经常有指标集合中，存在维度交叉情况，即当选择某一些维度的时候，指标是查不到内容的，因为指标没有跟该维度有矩阵交叉。

这种情况该如何设计数据模型呢?

2.核心看"五"设计思路

二、案例case
1.维度:
商家粒度: 商家等级、商家城市。
交易粒度: 交易时段
商品粒度: 商品品类

2.指标:
订单交易额、订单量、dau、在售商家数、交易用户数。

3.分析
a.dau属于流量模块专属的指标。这个比较独立，很容易理解。
b.在售商家数，属于商家模块指标，也比较独立。

因此当选择维度是交易时段的时候，“在售商家数”这个指标应该不会产生数据，因为该之间跟时间段无关。
因此在设计上的时候，“在售商家数”指标在“交易时段”维度的默认值为-1，表示维度选择全部的时候才查询他。

c.订单交易额、订单量、商品订单量、交易用户数,在交易模块，也比较好统计。而且交易模块是有时间段的维度的。
所以这三个指标归属交易模块统计也是合理的。

d.非常重要的细节
如果订单有N个商品，因此有两个交易表：订单表、订单+商品表。
而这两个表都可以出，这个时候，原则是一个指标只能出自一个模块，该如何解决这个问题呢。

因为“订单交易额”肯定是订单表出，因为订单商品明细表的价格之和可能不等于订单总金额。
而交易用户数、订单量、商品订单量(当选择商品品类维度时)，这三个都是跟商品订单有关系，因为一个订单有N个商品，所以订单量需要count(distinct)。同时交易用户数也需要count(distinct)。

e.什么情况需要考虑count(distinct)。
当统计的信息，不能唯一归属某一个维度的时候，就需要考虑count(distinct)。
比如商家下单的用户，也可能去其他商家那下单，因此当统计城市维度下的 用户数的时候，就会重复，因此需要count(distinct)。
同样如果一个订单只能买一个商品，那订单数确实不需要count(distinct)。但大多数场景是一个订单有N个商品，因此订单数也需要count(distinct)。

三、设计方案
1.模型按照业务主题进行划分，指标只归属在某一个主题内。
2.采用union all的方式。查询所有的模型。
3.注意:所有模型要有共同的维度，如果没有维度的，使用默认值-1代替。

四、优化
因为没必要将所有的数据 union all组成一个结果，再在结果基础上查询。
可以利用工具化的方式，比如有5组数据集 union all的结果。可以分别查5个数据集的结果，将结果进行union all。


----------
五、思想优化进步
1.维度表 --- 分模块创建dim维度表，并且有日、周、月三个表。
a.原因是 周、月由于跨多天，存在一些状态维度值的归属问题。
比如 营业状态(至少有一次，就更新为是)--简称以第一次写入的状态为准、商家城市(最新为准)
b.商家营业天数 -- 其实是可以放到aggr的view里，放dim也行，看规划吧，不强求。

2.aggr_view指标表 --- 不需要日 周 月三个表，只需要一个维度即可 --- 全量数据
a.原子指标，需要单独加工成底表。
b.不需要有 日 周 月 三个维度的视图表。
原因是 指标不应该周期有关系，指标的定义应该是派生指标(维度+原子指标)即可。因此视图完全够用。
c.全量数据，不要考虑需求，将数据进行过滤。
该表作为全局通用取数逻辑表，不要做任何条件筛选。比如代理商商家需求，只要代理商，但不要在该表做限制，而是要有全量商家数据。


3.topic模型层(明细表--多维汇总明细模型) --- 全量数据 或者 范围相对集中的非全量数据 
需要日周月三个维度表,并且在动态分区中,这样下游doris就可以直接通过动态分区字段，获取数据了(不是doris的问题，而是公司平台的限制，其实没必要，有dt就够了，查询周月时，根据dt查询范围即可)
注意:我没感觉到该模型有什么价值，最多周维度因为view不满足需求，所以需要落表而已。
a.虽然最终看板结果是多维度是有交叉的，不是所有指标都能满足所有维度，但一个指标设计的时候，一定输出在唯一的topic模型中。并且该topic模型一定是指标支持最全维度粒度。
b.尽量保持全量数据，除非有一些条件，比如业务类型，在整个集市上，大家有认同，认为就要限制好业务类型的商家，因此可以再这层先限制一下，做到非全量商家表。

4.app层做view,做交叉指标的union all
a.确保维度都要对齐，指标不存在的维度，需要用-1代替。
因此app层只针对特殊需求单独开发view。
b.view的价值是扩展性高。
c.由于客户端需要不同维度粒度的组合聚合结果，而结果中一部分是需要count_distinct去重的，因此保存的app层一定是明细模型。
d.视图的原因是指标与归属的维度，已经在topic明确，因此view层只是做简单的拼接需求输出而已。
e.在该层做where筛选，满足业务需求的结果，比如从topic中过滤只有代理商的商家信息结果。

5.doris
a.利用doris的聚合模型，将维度值相同的数据，在doris中进行聚合。
虽然view视图是明细，可能会有大量的数据，但到doris层后，利用bitmap数据结构，该层的数据最终条数只取决于维度值的组合情况。


