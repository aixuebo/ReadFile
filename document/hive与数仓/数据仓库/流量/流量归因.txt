一、背景与总结
1.归隐的目的，是解决功劳如何分配的问题。
比如用户访问一系列连接，最终下单，那这个功劳该如何分配给各个链路呢?
要解决的就是这个问题。



二、场景举例
1.场景1
用户进入抖音，同城模块 --> 博主A ---> 进店 ---> 退出。
下午,用户进入抖音，推荐模块 --> 博主A ---> 进店 ---> 下单。

因为上午没有下单，所以归属到推荐模块。而不是同城模块。

2.场景2
用户进入抖音，同城模块 --> 博主A ---> 进店 ---> 退出。
立即,用户进入推荐模块 --> 博主A ---> 进店 ---> 下单。

此时虽然在同一个session，但第一次进店，归属于同城，第二次进店归属于推荐，下单归属于推荐。

三、常见的归因模型
假设流量埋点日志按照时序，内容为:
9点，通过A渠道，进入店，
11点，通过B渠道，进入店。
19点，通过C渠道，进入店。
20点，下单。

1.首次触点归因 = 对同一个目标事件做贡献时，认为第一个事件功劳100%。
功劳结论:A 100%，B、C为0。
主要场景：用于购买决策周期短，或者新品牌的产品。因为购买周期短，用户有立即转化的倾向，所以他们的第一个接触点尤为重要。

2.末次触点归因 = 对同一个目标事件做贡献时，认为最后一个事件功劳100%。
功劳结论:A=0，B=0，C=100%。
主要场景：广告平台中最为常见，简单容易理解，并且容易计算与评估。

3.线性归因 = 对同一个目标事件做贡献时，认为每一个事件都是平均分配功劳。
功劳结论:A=1/3，B=1/3，C=1/3。
主要场景：适用于各渠道效果比较平均的情况，很少有这种情况，所以实用性不强。

4.位置归因 = 对同一个目标事件做贡献时，任务第一个和最后一个事件各占40%，其他中间事件平均分配剩余的20%。
主要场景：适用于十分重视线索来源和促成销售渠道的业务，我们也很少用到。

5.时间衰减归因 = 对同一个目标事件做贡献时，认为越靠近转化，做出贡献越大。分配权重不同。
主要场景:销售周期比较长的产品

四、实现方案
1.埋点的时候，tag信息携带。
a.SDK上,通过缓存信息，将tag做拼装，然后每次上报拼装的结果。
挑战是要session内，缓存要保持不错，按照访问时间依次拼装信息。
b.数据加工时，解析tag信息即可。

2.埋点的时候，固定参数传递。
比如launch参数，一直传递。
核心挑战是，参数能否一直传递过去，比如跨环境，跨页面，还能有效传递吗？是挑战。受页面跳转的实现，导致丢失参数影响较大。
比如抖音启动广告的时候，有一个参数 launch_channel = xxx,这个参数在接下来站内所有的请求都要带着。

3.数据开发时，逆向路径恢复。
与tag类似，只是是在加工处理阶段，利用时序+回退消除的规则，倒推。比如source_info字段回推。
4.数据开发时，正向路径穷举。

